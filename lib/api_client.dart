part of azure_devops_sdk.api;

class QueryParam {
  String name;
  String value;

  QueryParam(this.name, this.value);
}

class ApiClient {

  String basePath;
  var client = Client();

  Map<String, String> _defaultHeaderMap = {};
  Map<String, Authentication> _authentications = {};

  final _regList = RegExp(r'^List<(.*)>$');
  final _regMap = RegExp(r'^Map<String,(.*)>$');

  ApiClient({this.basePath = "https://app.vssps.visualstudio.com"}) {
    // Setup authentications (key: authentication name, value: authentication).
    _authentications['accessToken'] = HttpBasicAuth();
    _authentications['oauth2'] = OAuth();
  }

  void addDefaultHeader(String key, String value) {
     _defaultHeaderMap[key] = value;
  }

  dynamic _deserialize(dynamic value, String targetType) {
    try {
      switch (targetType) {
        case 'String':
          return '$value';
        case 'int':
          return value is int ? value : int.parse('$value');
        case 'bool':
          return value is bool ? value : '$value'.toLowerCase() == 'true';
        case 'double':
          return value is double ? value : double.parse('$value');
        case 'AadOauthTokenRequest':
          return AadOauthTokenRequest.fromJson(value);
        case 'AadOauthTokenResult':
          return AadOauthTokenResult.fromJson(value);
        case 'AbortTestRunRequest':
          return AbortTestRunRequest.fromJson(value);
        case 'AccessControlEntry':
          return AccessControlEntry.fromJson(value);
        case 'AccessControlList':
          return AccessControlList.fromJson(value);
        case 'AccessControlListsCollection':
          return AccessControlListsCollection.fromJson(value);
        case 'AccessLevel':
          return AccessLevel.fromJson(value);
        case 'Account':
          return Account.fromJson(value);
        case 'AccountCreateInfoInternal':
          return AccountCreateInfoInternal.fromJson(value);
        case 'AccountMyWorkResult':
          return AccountMyWorkResult.fromJson(value);
        case 'AccountPreferencesInternal':
          return AccountPreferencesInternal.fromJson(value);
        case 'AccountRecentActivityWorkItemModel':
          return AccountRecentActivityWorkItemModel.fromJson(value);
        case 'AccountRecentActivityWorkItemModel2':
          return AccountRecentActivityWorkItemModel2.fromJson(value);
        case 'AccountRecentActivityWorkItemModelBase':
          return AccountRecentActivityWorkItemModelBase.fromJson(value);
        case 'AccountRecentMentionWorkItemModel':
          return AccountRecentMentionWorkItemModel.fromJson(value);
        case 'AccountWorkWorkItemModel':
          return AccountWorkWorkItemModel.fromJson(value);
        case 'AceExtendedInformation':
          return AceExtendedInformation.fromJson(value);
        case 'AcquisitionOperation':
          return AcquisitionOperation.fromJson(value);
        case 'AcquisitionOperationDisallowReason':
          return AcquisitionOperationDisallowReason.fromJson(value);
        case 'AcquisitionOptions':
          return AcquisitionOptions.fromJson(value);
        case 'ActionDefinition':
          return ActionDefinition.fromJson(value);
        case 'Activity':
          return Activity.fromJson(value);
        case 'ActorFilter':
          return ActorFilter.fromJson(value);
        case 'ActorNotificationReason':
          return ActorNotificationReason.fromJson(value);
        case 'AddProcessWorkItemTypeFieldRequest':
          return AddProcessWorkItemTypeFieldRequest.fromJson(value);
        case 'AdminBehavior':
          return AdminBehavior.fromJson(value);
        case 'AdminBehaviorField':
          return AdminBehaviorField.fromJson(value);
        case 'AfnStrip':
          return AfnStrip.fromJson(value);
        case 'AgentArtifactDefinition':
          return AgentArtifactDefinition.fromJson(value);
        case 'AgentBasedDeployPhase':
          return AgentBasedDeployPhase.fromJson(value);
        case 'AgentChangeEvent':
          return AgentChangeEvent.fromJson(value);
        case 'AgentDeploymentInput':
          return AgentDeploymentInput.fromJson(value);
        case 'AgentGroup':
          return AgentGroup.fromJson(value);
        case 'AgentGroupAccessData':
          return AgentGroupAccessData.fromJson(value);
        case 'AgentJobRequestMessage':
          return AgentJobRequestMessage.fromJson(value);
        case 'AgentMigrationMessage':
          return AgentMigrationMessage.fromJson(value);
        case 'AgentPoolEvent':
          return AgentPoolEvent.fromJson(value);
        case 'AgentPoolQueue':
          return AgentPoolQueue.fromJson(value);
        case 'AgentPoolQueueReference':
          return AgentPoolQueueReference.fromJson(value);
        case 'AgentPoolQueueTarget':
          return AgentPoolQueueTarget.fromJson(value);
        case 'AgentQueueEvent':
          return AgentQueueEvent.fromJson(value);
        case 'AgentQueuesEvent':
          return AgentQueuesEvent.fromJson(value);
        case 'AgentRefreshMessage':
          return AgentRefreshMessage.fromJson(value);
        case 'AgentSpecification':
          return AgentSpecification.fromJson(value);
        case 'AgentTargetExecutionOptions':
          return AgentTargetExecutionOptions.fromJson(value);
        case 'AggregatedDataForResultTrend':
          return AggregatedDataForResultTrend.fromJson(value);
        case 'AggregatedResultsAnalysis':
          return AggregatedResultsAnalysis.fromJson(value);
        case 'AggregatedResultsByOutcome':
          return AggregatedResultsByOutcome.fromJson(value);
        case 'AggregatedResultsDifference':
          return AggregatedResultsDifference.fromJson(value);
        case 'AggregatedRunsByOutcome':
          return AggregatedRunsByOutcome.fromJson(value);
        case 'AggregatedRunsByState':
          return AggregatedRunsByState.fromJson(value);
        case 'Application':
          return Application.fromJson(value);
        case 'ApplicationCounters':
          return ApplicationCounters.fromJson(value);
        case 'ApplicationType':
          return ApplicationType.fromJson(value);
        case 'ApprovalOptions':
          return ApprovalOptions.fromJson(value);
        case 'Artifact':
          return Artifact.fromJson(value);
        case 'ArtifactContributionDefinition':
          return ArtifactContributionDefinition.fromJson(value);
        case 'ArtifactDownloadInputBase':
          return ArtifactDownloadInputBase.fromJson(value);
        case 'ArtifactFilter':
          return ArtifactFilter.fromJson(value);
        case 'ArtifactInstanceData':
          return ArtifactInstanceData.fromJson(value);
        case 'ArtifactMetadata':
          return ArtifactMetadata.fromJson(value);
        case 'ArtifactProvider':
          return ArtifactProvider.fromJson(value);
        case 'ArtifactResource':
          return ArtifactResource.fromJson(value);
        case 'ArtifactSourceId':
          return ArtifactSourceId.fromJson(value);
        case 'ArtifactSourceIdsQueryResult':
          return ArtifactSourceIdsQueryResult.fromJson(value);
        case 'ArtifactSourceReference':
          return ArtifactSourceReference.fromJson(value);
        case 'ArtifactSourceTrigger':
          return ArtifactSourceTrigger.fromJson(value);
        case 'ArtifactTriggerConfiguration':
          return ArtifactTriggerConfiguration.fromJson(value);
        case 'ArtifactTypeDefinition':
          return ArtifactTypeDefinition.fromJson(value);
        case 'ArtifactUriQuery':
          return ArtifactUriQuery.fromJson(value);
        case 'ArtifactUriQueryResult':
          return ArtifactUriQueryResult.fromJson(value);
        case 'ArtifactVersion':
          return ArtifactVersion.fromJson(value);
        case 'ArtifactVersionQueryResult':
          return ArtifactVersionQueryResult.fromJson(value);
        case 'ArtifactsDownloadInput':
          return ArtifactsDownloadInput.fromJson(value);
        case 'AssociatedWorkItem':
          return AssociatedWorkItem.fromJson(value);
        case 'AsyncGitOperationNotification':
          return AsyncGitOperationNotification.fromJson(value);
        case 'AsyncRefOperationCommitLevelEventNotification':
          return AsyncRefOperationCommitLevelEventNotification.fromJson(value);
        case 'AsyncRefOperationCompletedNotification':
          return AsyncRefOperationCompletedNotification.fromJson(value);
        case 'AsyncRefOperationConflictNotification':
          return AsyncRefOperationConflictNotification.fromJson(value);
        case 'AsyncRefOperationGeneralFailureNotification':
          return AsyncRefOperationGeneralFailureNotification.fromJson(value);
        case 'AsyncRefOperationProgressNotification':
          return AsyncRefOperationProgressNotification.fromJson(value);
        case 'AsyncRefOperationTimeoutNotification':
          return AsyncRefOperationTimeoutNotification.fromJson(value);
        case 'Attachment':
          return Attachment.fromJson(value);
        case 'AttachmentReference':
          return AttachmentReference.fromJson(value);
        case 'Attribute':
          return Attribute.fromJson(value);
        case 'AttributeDescriptor':
          return AttributeDescriptor.fromJson(value);
        case 'AttributesContainer':
          return AttributesContainer.fromJson(value);
        case 'AuditLogEntry':
          return AuditLogEntry.fromJson(value);
        case 'AuditLogQueryResult':
          return AuditLogQueryResult.fromJson(value);
        case 'AuthConfiguration':
          return AuthConfiguration.fromJson(value);
        case 'AuthenticationSchemeReference':
          return AuthenticationSchemeReference.fromJson(value);
        case 'AuthorizationHeader':
          return AuthorizationHeader.fromJson(value);
        case 'AutoCompleteUpdatedEvent':
          return AutoCompleteUpdatedEvent.fromJson(value);
        case 'AutoTriggerIssue':
          return AutoTriggerIssue.fromJson(value);
        case 'Avatar':
          return Avatar.fromJson(value);
        case 'AzureKeyVaultPermission':
          return AzureKeyVaultPermission.fromJson(value);
        case 'AzureKeyVaultVariableGroupProviderData':
          return AzureKeyVaultVariableGroupProviderData.fromJson(value);
        case 'AzureKeyVaultVariableValue':
          return AzureKeyVaultVariableValue.fromJson(value);
        case 'AzureMLWorkspace':
          return AzureMLWorkspace.fromJson(value);
        case 'AzureManagementGroup':
          return AzureManagementGroup.fromJson(value);
        case 'AzureManagementGroupQueryResult':
          return AzureManagementGroupQueryResult.fromJson(value);
        case 'AzurePermission':
          return AzurePermission.fromJson(value);
        case 'AzureResourcePermission':
          return AzureResourcePermission.fromJson(value);
        case 'AzureRoleAssignmentPermission':
          return AzureRoleAssignmentPermission.fromJson(value);
        case 'AzureSpnOperationStatus':
          return AzureSpnOperationStatus.fromJson(value);
        case 'AzureSubscription':
          return AzureSubscription.fromJson(value);
        case 'AzureSubscriptionQueryResult':
          return AzureSubscriptionQueryResult.fromJson(value);
        case 'BacklogColumn':
          return BacklogColumn.fromJson(value);
        case 'BacklogConfiguration':
          return BacklogConfiguration.fromJson(value);
        case 'BacklogFields':
          return BacklogFields.fromJson(value);
        case 'BacklogLevel':
          return BacklogLevel.fromJson(value);
        case 'BacklogLevelConfiguration':
          return BacklogLevelConfiguration.fromJson(value);
        case 'BacklogLevelWorkItems':
          return BacklogLevelWorkItems.fromJson(value);
        case 'BaseDeploymentInput':
          return BaseDeploymentInput.fromJson(value);
        case 'BaseOperationResult':
          return BaseOperationResult.fromJson(value);
        case 'BaseSubscriptionFilter':
          return BaseSubscriptionFilter.fromJson(value);
        case 'BatchDeprecateData':
          return BatchDeprecateData.fromJson(value);
        case 'BatchListData':
          return BatchListData.fromJson(value);
        case 'BatchNotificationOperation':
          return BatchNotificationOperation.fromJson(value);
        case 'BatchResponse':
          return BatchResponse.fromJson(value);
        case 'BlockFilter':
          return BlockFilter.fromJson(value);
        case 'BlockSubscriptionChannel':
          return BlockSubscriptionChannel.fromJson(value);
        case 'Board':
          return Board.fromJson(value);
        case 'BoardBadge':
          return BoardBadge.fromJson(value);
        case 'BoardCardRuleSettings':
          return BoardCardRuleSettings.fromJson(value);
        case 'BoardCardSettings':
          return BoardCardSettings.fromJson(value);
        case 'BoardChart':
          return BoardChart.fromJson(value);
        case 'BoardChartReference':
          return BoardChartReference.fromJson(value);
        case 'BoardColumn':
          return BoardColumn.fromJson(value);
        case 'BoardFields':
          return BoardFields.fromJson(value);
        case 'BoardReference':
          return BoardReference.fromJson(value);
        case 'BoardRow':
          return BoardRow.fromJson(value);
        case 'BoardSuggestedValue':
          return BoardSuggestedValue.fromJson(value);
        case 'BoardUserSettings':
          return BoardUserSettings.fromJson(value);
        case 'BranchUpdatedEvent':
          return BranchUpdatedEvent.fromJson(value);
        case 'BrowserMix':
          return BrowserMix.fromJson(value);
        case 'Build':
          return Build.fromJson(value);
        case 'BuildAgent':
          return BuildAgent.fromJson(value);
        case 'BuildAgentReference':
          return BuildAgentReference.fromJson(value);
        case 'BuildArtifact':
          return BuildArtifact.fromJson(value);
        case 'BuildArtifactDownloadInput':
          return BuildArtifactDownloadInput.fromJson(value);
        case 'BuildBadge':
          return BuildBadge.fromJson(value);
        case 'BuildCompletedEvent':
          return BuildCompletedEvent.fromJson(value);
        case 'BuildCompletionTrigger':
          return BuildCompletionTrigger.fromJson(value);
        case 'BuildConfiguration':
          return BuildConfiguration.fromJson(value);
        case 'BuildController':
          return BuildController.fromJson(value);
        case 'BuildCoverage':
          return BuildCoverage.fromJson(value);
        case 'BuildDefinition':
          return BuildDefinition.fromJson(value);
        case 'BuildDefinition32':
          return BuildDefinition32.fromJson(value);
        case 'BuildDefinitionReference':
          return BuildDefinitionReference.fromJson(value);
        case 'BuildDefinitionReference32':
          return BuildDefinitionReference32.fromJson(value);
        case 'BuildDefinitionRevision':
          return BuildDefinitionRevision.fromJson(value);
        case 'BuildDefinitionSourceProvider':
          return BuildDefinitionSourceProvider.fromJson(value);
        case 'BuildDefinitionStep':
          return BuildDefinitionStep.fromJson(value);
        case 'BuildDefinitionTemplate':
          return BuildDefinitionTemplate.fromJson(value);
        case 'BuildDefinitionTemplate32':
          return BuildDefinitionTemplate32.fromJson(value);
        case 'BuildDefinitionVariable':
          return BuildDefinitionVariable.fromJson(value);
        case 'BuildDeletedEvent':
          return BuildDeletedEvent.fromJson(value);
        case 'BuildDeployment':
          return BuildDeployment.fromJson(value);
        case 'BuildEvent':
          return BuildEvent.fromJson(value);
        case 'BuildLog':
          return BuildLog.fromJson(value);
        case 'BuildLogReference':
          return BuildLogReference.fromJson(value);
        case 'BuildMetric':
          return BuildMetric.fromJson(value);
        case 'BuildOption':
          return BuildOption.fromJson(value);
        case 'BuildOptionDefinition':
          return BuildOptionDefinition.fromJson(value);
        case 'BuildOptionDefinitionReference':
          return BuildOptionDefinitionReference.fromJson(value);
        case 'BuildOptionGroupDefinition':
          return BuildOptionGroupDefinition.fromJson(value);
        case 'BuildOptionInputDefinition':
          return BuildOptionInputDefinition.fromJson(value);
        case 'BuildProcess':
          return BuildProcess.fromJson(value);
        case 'BuildProcessResources':
          return BuildProcessResources.fromJson(value);
        case 'BuildProcessTemplate':
          return BuildProcessTemplate.fromJson(value);
        case 'BuildQueuedEvent':
          return BuildQueuedEvent.fromJson(value);
        case 'BuildReference':
          return BuildReference.fromJson(value);
        case 'BuildReference2':
          return BuildReference2.fromJson(value);
        case 'BuildReportMetadata':
          return BuildReportMetadata.fromJson(value);
        case 'BuildRepository':
          return BuildRepository.fromJson(value);
        case 'BuildRequestValidationResult':
          return BuildRequestValidationResult.fromJson(value);
        case 'BuildResourceUsage':
          return BuildResourceUsage.fromJson(value);
        case 'BuildServer':
          return BuildServer.fromJson(value);
        case 'BuildSettings':
          return BuildSettings.fromJson(value);
        case 'BuildSummary':
          return BuildSummary.fromJson(value);
        case 'BuildTagsAddedEvent':
          return BuildTagsAddedEvent.fromJson(value);
        case 'BuildTrigger':
          return BuildTrigger.fromJson(value);
        case 'BuildUpdatedEvent':
          return BuildUpdatedEvent.fromJson(value);
        case 'BuildVersion':
          return BuildVersion.fromJson(value);
        case 'BuildWorkspace':
          return BuildWorkspace.fromJson(value);
        case 'BuildsDeletedEvent':
          return BuildsDeletedEvent.fromJson(value);
        case 'BuildsDeletedEvent1':
          return BuildsDeletedEvent1.fromJson(value);
        case 'BulkResultUpdateRequest':
          return BulkResultUpdateRequest.fromJson(value);
        case 'CapacityContractBase':
          return CapacityContractBase.fromJson(value);
        case 'CapacityPatch':
          return CapacityPatch.fromJson(value);
        case 'CardFieldSettings':
          return CardFieldSettings.fromJson(value);
        case 'CardSettings':
          return CardSettings.fromJson(value);
        case 'CategoryConfiguration':
          return CategoryConfiguration.fromJson(value);
        case 'Change':
          return Change.fromJson(value);
        case 'ChangeCountDictionary':
          return ChangeCountDictionary.fromJson(value);
        case 'ChangeList':
          return ChangeList.fromJson(value);
        case 'ChangeListSearchCriteria':
          return ChangeListSearchCriteria.fromJson(value);
        case 'CheckTemplateExistenceResult':
          return CheckTemplateExistenceResult.fromJson(value);
        case 'CheckinNote':
          return CheckinNote.fromJson(value);
        case 'ClientCertificate':
          return ClientCertificate.fromJson(value);
        case 'ClientContribution':
          return ClientContribution.fromJson(value);
        case 'ClientContributionNode':
          return ClientContributionNode.fromJson(value);
        case 'ClientContributionProviderDetails':
          return ClientContributionProviderDetails.fromJson(value);
        case 'ClientDataProviderQuery':
          return ClientDataProviderQuery.fromJson(value);
        case 'CloneOperationCommonResponse':
          return CloneOperationCommonResponse.fromJson(value);
        case 'CloneOperationInformation':
          return CloneOperationInformation.fromJson(value);
        case 'CloneOptions':
          return CloneOptions.fromJson(value);
        case 'CloneStatistics':
          return CloneStatistics.fromJson(value);
        case 'CloneTestPlanOperationInformation':
          return CloneTestPlanOperationInformation.fromJson(value);
        case 'CloneTestPlanParams':
          return CloneTestPlanParams.fromJson(value);
        case 'CloneTestSuiteOperationInformation':
          return CloneTestSuiteOperationInformation.fromJson(value);
        case 'CloneTestSuiteParams':
          return CloneTestSuiteParams.fromJson(value);
        case 'CltCustomerIntelligenceData':
          return CltCustomerIntelligenceData.fromJson(value);
        case 'CodeCoverageData':
          return CodeCoverageData.fromJson(value);
        case 'CodeCoverageStatistics':
          return CodeCoverageStatistics.fromJson(value);
        case 'CodeCoverageSummary':
          return CodeCoverageSummary.fromJson(value);
        case 'CodeCoverageSummary2':
          return CodeCoverageSummary2.fromJson(value);
        case 'CodeRepositoryReference':
          return CodeRepositoryReference.fromJson(value);
        case 'CodeResult':
          return CodeResult.fromJson(value);
        case 'CodeSearchRequest':
          return CodeSearchRequest.fromJson(value);
        case 'CodeSearchResponse':
          return CodeSearchResponse.fromJson(value);
        case 'Collection':
          return Collection.fromJson(value);
        case 'Comment':
          return Comment.fromJson(value);
        case 'CommentCreate':
          return CommentCreate.fromJson(value);
        case 'CommentIterationContext':
          return CommentIterationContext.fromJson(value);
        case 'CommentList':
          return CommentList.fromJson(value);
        case 'CommentMention':
          return CommentMention.fromJson(value);
        case 'CommentPosition':
          return CommentPosition.fromJson(value);
        case 'CommentReaction':
          return CommentReaction.fromJson(value);
        case 'CommentThread':
          return CommentThread.fromJson(value);
        case 'CommentThreadContext':
          return CommentThreadContext.fromJson(value);
        case 'CommentTrackingCriteria':
          return CommentTrackingCriteria.fromJson(value);
        case 'CommentUpdate':
          return CommentUpdate.fromJson(value);
        case 'CommentVersion':
          return CommentVersion.fromJson(value);
        case 'CompletionErrorsEvent':
          return CompletionErrorsEvent.fromJson(value);
        case 'ComplianceSettings':
          return ComplianceSettings.fromJson(value);
        case 'Condition':
          return Condition.fromJson(value);
        case 'Configuration':
          return Configuration.fromJson(value);
        case 'ConfigurationVariableValue':
          return ConfigurationVariableValue.fromJson(value);
        case 'ConsoleLogEvent':
          return ConsoleLogEvent.fromJson(value);
        case 'Consumer':
          return Consumer.fromJson(value);
        case 'ConsumerAction':
          return ConsumerAction.fromJson(value);
        case 'ContainerImageTrigger':
          return ContainerImageTrigger.fromJson(value);
        case 'ContinuousDeploymentDefinition':
          return ContinuousDeploymentDefinition.fromJson(value);
        case 'ContinuousDeploymentTriggerIssue':
          return ContinuousDeploymentTriggerIssue.fromJson(value);
        case 'ContinuousIntegrationTrigger':
          return ContinuousIntegrationTrigger.fromJson(value);
        case 'Contribution':
          return Contribution.fromJson(value);
        case 'ContributionBase':
          return ContributionBase.fromJson(value);
        case 'ContributionConstraint':
          return ContributionConstraint.fromJson(value);
        case 'ContributionNodeQuery':
          return ContributionNodeQuery.fromJson(value);
        case 'ContributionNodeQueryResult':
          return ContributionNodeQueryResult.fromJson(value);
        case 'ContributionPropertyDescription':
          return ContributionPropertyDescription.fromJson(value);
        case 'ContributionProviderDetails':
          return ContributionProviderDetails.fromJson(value);
        case 'ContributionType':
          return ContributionType.fromJson(value);
        case 'Control':
          return Control.fromJson(value);
        case 'ControlOptions':
          return ControlOptions.fromJson(value);
        case 'CoreProfileAttribute':
          return CoreProfileAttribute.fromJson(value);
        case 'CounterGroup':
          return CounterGroup.fromJson(value);
        case 'CounterInstanceSamples':
          return CounterInstanceSamples.fromJson(value);
        case 'CounterSample':
          return CounterSample.fromJson(value);
        case 'CounterSampleQueryDetails':
          return CounterSampleQueryDetails.fromJson(value);
        case 'CounterSamplesResult':
          return CounterSamplesResult.fromJson(value);
        case 'CounterVariable':
          return CounterVariable.fromJson(value);
        case 'Coverage2':
          return Coverage2.fromJson(value);
        case 'CoverageStatistics':
          return CoverageStatistics.fromJson(value);
        case 'CreatePlan':
          return CreatePlan.fromJson(value);
        case 'CreateProcessModel':
          return CreateProcessModel.fromJson(value);
        case 'CreateProcessRuleRequest':
          return CreateProcessRuleRequest.fromJson(value);
        case 'CreateProcessWorkItemTypeRequest':
          return CreateProcessWorkItemTypeRequest.fromJson(value);
        case 'CreateProfileContext':
          return CreateProfileContext.fromJson(value);
        case 'CreateTestMessageLogEntryRequest':
          return CreateTestMessageLogEntryRequest.fromJson(value);
        case 'CreateTestResultsRequest':
          return CreateTestResultsRequest.fromJson(value);
        case 'CreateTestRunRequest':
          return CreateTestRunRequest.fromJson(value);
        case 'CustomArtifactDownloadInput':
          return CustomArtifactDownloadInput.fromJson(value);
        case 'CustomTestField':
          return CustomTestField.fromJson(value);
        case 'CustomTestFieldDefinition':
          return CustomTestFieldDefinition.fromJson(value);
        case 'Dashboard':
          return Dashboard.fromJson(value);
        case 'DashboardGroup':
          return DashboardGroup.fromJson(value);
        case 'DashboardGroupEntry':
          return DashboardGroupEntry.fromJson(value);
        case 'DashboardGroupEntryResponse':
          return DashboardGroupEntryResponse.fromJson(value);
        case 'DashboardResponse':
          return DashboardResponse.fromJson(value);
        case 'DataProviderContext':
          return DataProviderContext.fromJson(value);
        case 'DataProviderExceptionDetails':
          return DataProviderExceptionDetails.fromJson(value);
        case 'DataProviderQuery':
          return DataProviderQuery.fromJson(value);
        case 'DataProviderResult':
          return DataProviderResult.fromJson(value);
        case 'DataProviderSharedData':
          return DataProviderSharedData.fromJson(value);
        case 'DataSource':
          return DataSource.fromJson(value);
        case 'DataSourceBinding':
          return DataSourceBinding.fromJson(value);
        case 'DataSourceBindingBase':
          return DataSourceBindingBase.fromJson(value);
        case 'DataSourceDetails':
          return DataSourceDetails.fromJson(value);
        case 'DateRange':
          return DateRange.fromJson(value);
        case 'DatedTestFieldData':
          return DatedTestFieldData.fromJson(value);
        case 'DebugEntry':
          return DebugEntry.fromJson(value);
        case 'DebugEntryCreateBatch':
          return DebugEntryCreateBatch.fromJson(value);
        case 'DecoratedAuditLogEntry':
          return DecoratedAuditLogEntry.fromJson(value);
        case 'DefaultAfnStripBinding':
          return DefaultAfnStripBinding.fromJson(value);
        case 'DefinitionEnvironmentReference':
          return DefinitionEnvironmentReference.fromJson(value);
        case 'DefinitionReference':
          return DefinitionReference.fromJson(value);
        case 'DefinitionResourceReference':
          return DefinitionResourceReference.fromJson(value);
        case 'DeleteTestRunRequest':
          return DeleteTestRunRequest.fromJson(value);
        case 'DeliveryViewData':
          return DeliveryViewData.fromJson(value);
        case 'DeliveryViewPropertyCollection':
          return DeliveryViewPropertyCollection.fromJson(value);
        case 'Demand':
          return Demand.fromJson(value);
        case 'DemandEquals':
          return DemandEquals.fromJson(value);
        case 'DemandExists':
          return DemandExists.fromJson(value);
        case 'DemandMinimumVersion':
          return DemandMinimumVersion.fromJson(value);
        case 'Dependency':
          return Dependency.fromJson(value);
        case 'DependencyBinding':
          return DependencyBinding.fromJson(value);
        case 'DependencyData':
          return DependencyData.fromJson(value);
        case 'DependsOn':
          return DependsOn.fromJson(value);
        case 'DeployPhase':
          return DeployPhase.fromJson(value);
        case 'Deployment':
          return Deployment.fromJson(value);
        case 'DeploymentApprovalCompletedEvent':
          return DeploymentApprovalCompletedEvent.fromJson(value);
        case 'DeploymentApprovalPendingEvent':
          return DeploymentApprovalPendingEvent.fromJson(value);
        case 'DeploymentAttempt':
          return DeploymentAttempt.fromJson(value);
        case 'DeploymentAuthorizationInfo':
          return DeploymentAuthorizationInfo.fromJson(value);
        case 'DeploymentBuild':
          return DeploymentBuild.fromJson(value);
        case 'DeploymentCompletedEvent':
          return DeploymentCompletedEvent.fromJson(value);
        case 'DeploymentDeploy':
          return DeploymentDeploy.fromJson(value);
        case 'DeploymentGatesChangeEvent':
          return DeploymentGatesChangeEvent.fromJson(value);
        case 'DeploymentGroup':
          return DeploymentGroup.fromJson(value);
        case 'DeploymentGroupCreateParameter':
          return DeploymentGroupCreateParameter.fromJson(value);
        case 'DeploymentGroupCreateParameterPoolProperty':
          return DeploymentGroupCreateParameterPoolProperty.fromJson(value);
        case 'DeploymentGroupMetrics':
          return DeploymentGroupMetrics.fromJson(value);
        case 'DeploymentGroupReference':
          return DeploymentGroupReference.fromJson(value);
        case 'DeploymentGroupUpdateParameter':
          return DeploymentGroupUpdateParameter.fromJson(value);
        case 'DeploymentInput':
          return DeploymentInput.fromJson(value);
        case 'DeploymentJob':
          return DeploymentJob.fromJson(value);
        case 'DeploymentMachine':
          return DeploymentMachine.fromJson(value);
        case 'DeploymentMachineChangedData':
          return DeploymentMachineChangedData.fromJson(value);
        case 'DeploymentMachineGroup':
          return DeploymentMachineGroup.fromJson(value);
        case 'DeploymentMachineGroupReference':
          return DeploymentMachineGroupReference.fromJson(value);
        case 'DeploymentMachinesChangeEvent':
          return DeploymentMachinesChangeEvent.fromJson(value);
        case 'DeploymentManualInterventionPendingEvent':
          return DeploymentManualInterventionPendingEvent.fromJson(value);
        case 'DeploymentPoolSummary':
          return DeploymentPoolSummary.fromJson(value);
        case 'DeploymentQueryParameters':
          return DeploymentQueryParameters.fromJson(value);
        case 'DeploymentStartedEvent':
          return DeploymentStartedEvent.fromJson(value);
        case 'DeploymentTargetUpdateParameter':
          return DeploymentTargetUpdateParameter.fromJson(value);
        case 'DeploymentTest':
          return DeploymentTest.fromJson(value);
        case 'DesignerProcess':
          return DesignerProcess.fromJson(value);
        case 'DesignerProcessTarget':
          return DesignerProcessTarget.fromJson(value);
        case 'DestinationTestPlanCloneParams':
          return DestinationTestPlanCloneParams.fromJson(value);
        case 'DestinationTestSuiteInfo':
          return DestinationTestSuiteInfo.fromJson(value);
        case 'DiagnosticIdentity':
          return DiagnosticIdentity.fromJson(value);
        case 'DiagnosticLogMetadata':
          return DiagnosticLogMetadata.fromJson(value);
        case 'DiagnosticNotification':
          return DiagnosticNotification.fromJson(value);
        case 'DiagnosticRecipient':
          return DiagnosticRecipient.fromJson(value);
        case 'Diagnostics':
          return Diagnostics.fromJson(value);
        case 'DiscussionsUpdatedEvent':
          return DiscussionsUpdatedEvent.fromJson(value);
        case 'DockerProcess':
          return DockerProcess.fromJson(value);
        case 'DockerProcessTarget':
          return DockerProcessTarget.fromJson(value);
        case 'DownloadAttachmentsRequest':
          return DownloadAttachmentsRequest.fromJson(value);
        case 'DropAccessData':
          return DropAccessData.fromJson(value);
        case 'DtlEnvironmentDetails':
          return DtlEnvironmentDetails.fromJson(value);
        case 'EmailHtmlSubscriptionChannel':
          return EmailHtmlSubscriptionChannel.fromJson(value);
        case 'EmailPlaintextSubscriptionChannel':
          return EmailPlaintextSubscriptionChannel.fromJson(value);
        case 'EmailRecipients':
          return EmailRecipients.fromJson(value);
        case 'EndpointAuthorization':
          return EndpointAuthorization.fromJson(value);
        case 'EndpointOperationStatus':
          return EndpointOperationStatus.fromJson(value);
        case 'EndpointUrl':
          return EndpointUrl.fromJson(value);
        case 'EntitySearchRequest':
          return EntitySearchRequest.fromJson(value);
        case 'EntitySearchRequestBase':
          return EntitySearchRequestBase.fromJson(value);
        case 'EntitySearchResponse':
          return EntitySearchResponse.fromJson(value);
        case 'EnvironmentCreateParameter':
          return EnvironmentCreateParameter.fromJson(value);
        case 'EnvironmentDeploymentExecutionRecord':
          return EnvironmentDeploymentExecutionRecord.fromJson(value);
        case 'EnvironmentExecutionPolicy':
          return EnvironmentExecutionPolicy.fromJson(value);
        case 'EnvironmentInstance':
          return EnvironmentInstance.fromJson(value);
        case 'EnvironmentLinkedResourceReference':
          return EnvironmentLinkedResourceReference.fromJson(value);
        case 'EnvironmentOptions':
          return EnvironmentOptions.fromJson(value);
        case 'EnvironmentReference':
          return EnvironmentReference.fromJson(value);
        case 'EnvironmentResource':
          return EnvironmentResource.fromJson(value);
        case 'EnvironmentResourceReference':
          return EnvironmentResourceReference.fromJson(value);
        case 'EnvironmentRetentionPolicy':
          return EnvironmentRetentionPolicy.fromJson(value);
        case 'EnvironmentTrigger':
          return EnvironmentTrigger.fromJson(value);
        case 'EnvironmentTriggerContent':
          return EnvironmentTriggerContent.fromJson(value);
        case 'EnvironmentUpdateParameter':
          return EnvironmentUpdateParameter.fromJson(value);
        case 'ErrorDetails':
          return ErrorDetails.fromJson(value);
        case 'Event':
          return Event.fromJson(value);
        case 'EventActor':
          return EventActor.fromJson(value);
        case 'EventBacklogStatus':
          return EventBacklogStatus.fromJson(value);
        case 'EventBatch':
          return EventBatch.fromJson(value);
        case 'EventProcessingLog':
          return EventProcessingLog.fromJson(value);
        case 'EventScope':
          return EventScope.fromJson(value);
        case 'EventTransformRequest':
          return EventTransformRequest.fromJson(value);
        case 'EventTransformResult':
          return EventTransformResult.fromJson(value);
        case 'EventTypeDescriptor':
          return EventTypeDescriptor.fromJson(value);
        case 'EventsEvaluationResult':
          return EventsEvaluationResult.fromJson(value);
        case 'ExecutionInput':
          return ExecutionInput.fromJson(value);
        case 'ExpressionFilter':
          return ExpressionFilter.fromJson(value);
        case 'ExpressionFilterClause':
          return ExpressionFilterClause.fromJson(value);
        case 'ExpressionFilterGroup':
          return ExpressionFilterGroup.fromJson(value);
        case 'ExpressionFilterModel':
          return ExpressionFilterModel.fromJson(value);
        case 'ExpressionValidationItem':
          return ExpressionValidationItem.fromJson(value);
        case 'Extension':
          return Extension.fromJson(value);
        case 'ExtensionAcquisitionRequest':
          return ExtensionAcquisitionRequest.fromJson(value);
        case 'ExtensionAuditLog':
          return ExtensionAuditLog.fromJson(value);
        case 'ExtensionAuditLogEntry':
          return ExtensionAuditLogEntry.fromJson(value);
        case 'ExtensionAuthorization':
          return ExtensionAuthorization.fromJson(value);
        case 'ExtensionBadge':
          return ExtensionBadge.fromJson(value);
        case 'ExtensionDataCollection':
          return ExtensionDataCollection.fromJson(value);
        case 'ExtensionDataCollectionQuery':
          return ExtensionDataCollectionQuery.fromJson(value);
        case 'ExtensionEvent':
          return ExtensionEvent.fromJson(value);
        case 'ExtensionEventCallback':
          return ExtensionEventCallback.fromJson(value);
        case 'ExtensionEventCallbackCollection':
          return ExtensionEventCallbackCollection.fromJson(value);
        case 'ExtensionEventUrls':
          return ExtensionEventUrls.fromJson(value);
        case 'ExtensionFile':
          return ExtensionFile.fromJson(value);
        case 'ExtensionHost':
          return ExtensionHost.fromJson(value);
        case 'ExtensionIdentifier':
          return ExtensionIdentifier.fromJson(value);
        case 'ExtensionLicensing':
          return ExtensionLicensing.fromJson(value);
        case 'ExtensionManifest':
          return ExtensionManifest.fromJson(value);
        case 'ExtensionPolicy':
          return ExtensionPolicy.fromJson(value);
        case 'ExtensionRequest':
          return ExtensionRequest.fromJson(value);
        case 'ExtensionRequestEvent':
          return ExtensionRequestEvent.fromJson(value);
        case 'ExtensionRequestUrls':
          return ExtensionRequestUrls.fromJson(value);
        case 'ExtensionRequestsEvent':
          return ExtensionRequestsEvent.fromJson(value);
        case 'ExtensionShare':
          return ExtensionShare.fromJson(value);
        case 'ExtensionState':
          return ExtensionState.fromJson(value);
        case 'ExtensionStatistic':
          return ExtensionStatistic.fromJson(value);
        case 'ExtensionSummaryData':
          return ExtensionSummaryData.fromJson(value);
        case 'ExtensionUrls':
          return ExtensionUrls.fromJson(value);
        case 'ExtensionVersion':
          return ExtensionVersion.fromJson(value);
        case 'ExternalConfigurationDescriptor':
          return ExternalConfigurationDescriptor.fromJson(value);
        case 'FailingSince':
          return FailingSince.fromJson(value);
        case 'FavoriteItem':
          return FavoriteItem.fromJson(value);
        case 'Feed':
          return Feed.fromJson(value);
        case 'FeedBatchData':
          return FeedBatchData.fromJson(value);
        case 'FeedChange':
          return FeedChange.fromJson(value);
        case 'FeedChangesResponse':
          return FeedChangesResponse.fromJson(value);
        case 'FeedCore':
          return FeedCore.fromJson(value);
        case 'FeedInfo':
          return FeedInfo.fromJson(value);
        case 'FeedPermission':
          return FeedPermission.fromJson(value);
        case 'FeedRetentionPolicy':
          return FeedRetentionPolicy.fromJson(value);
        case 'FeedUpdate':
          return FeedUpdate.fromJson(value);
        case 'FeedView':
          return FeedView.fromJson(value);
        case 'FetchTestResultsRequest':
          return FetchTestResultsRequest.fromJson(value);
        case 'FetchTestResultsResponse':
          return FetchTestResultsResponse.fromJson(value);
        case 'FieldDependentRule':
          return FieldDependentRule.fromJson(value);
        case 'FieldDetailsForTestResults':
          return FieldDetailsForTestResults.fromJson(value);
        case 'FieldInfo':
          return FieldInfo.fromJson(value);
        case 'FieldInputValues':
          return FieldInputValues.fromJson(value);
        case 'FieldModel':
          return FieldModel.fromJson(value);
        case 'FieldReference':
          return FieldReference.fromJson(value);
        case 'FieldRuleModel':
          return FieldRuleModel.fromJson(value);
        case 'FieldSetting':
          return FieldSetting.fromJson(value);
        case 'FieldValuesQuery':
          return FieldValuesQuery.fromJson(value);
        case 'FieldsToEvaluate':
          return FieldsToEvaluate.fromJson(value);
        case 'FileContentMetadata':
          return FileContentMetadata.fromJson(value);
        case 'FileCoverage':
          return FileCoverage.fromJson(value);
        case 'FileCoverageRequest':
          return FileCoverageRequest.fromJson(value);
        case 'FileDiff':
          return FileDiff.fromJson(value);
        case 'FileDiffParams':
          return FileDiffParams.fromJson(value);
        case 'FileDiffsCriteria':
          return FileDiffsCriteria.fromJson(value);
        case 'Filter':
          return Filter.fromJson(value);
        case 'FilterClause':
          return FilterClause.fromJson(value);
        case 'FilterGroup':
          return FilterGroup.fromJson(value);
        case 'FilterPointQuery':
          return FilterPointQuery.fromJson(value);
        case 'FlakyDetection':
          return FlakyDetection.fromJson(value);
        case 'FlakyDetectionPipelines':
          return FlakyDetectionPipelines.fromJson(value);
        case 'FlakySettings':
          return FlakySettings.fromJson(value);
        case 'Folder':
          return Folder.fromJson(value);
        case 'Forks':
          return Forks.fromJson(value);
        case 'FormLayout':
          return FormLayout.fromJson(value);
        case 'FormattedEventMessage':
          return FormattedEventMessage.fromJson(value);
        case 'FunctionCoverage':
          return FunctionCoverage.fromJson(value);
        case 'FunctionCoverage2':
          return FunctionCoverage2.fromJson(value);
        case 'GateUpdateMetadata':
          return GateUpdateMetadata.fromJson(value);
        case 'GatedCheckInTrigger':
          return GatedCheckInTrigger.fromJson(value);
        case 'GatesDeployPhase':
          return GatesDeployPhase.fromJson(value);
        case 'GatesDeploymentInput':
          return GatesDeploymentInput.fromJson(value);
        case 'GeneratedNotification':
          return GeneratedNotification.fromJson(value);
        case 'GeoRegion':
          return GeoRegion.fromJson(value);
        case 'GitAnnotatedTag':
          return GitAnnotatedTag.fromJson(value);
        case 'GitArtifactDownloadInput':
          return GitArtifactDownloadInput.fromJson(value);
        case 'GitAsyncRefOperation':
          return GitAsyncRefOperation.fromJson(value);
        case 'GitAsyncRefOperationDetail':
          return GitAsyncRefOperationDetail.fromJson(value);
        case 'GitAsyncRefOperationParameters':
          return GitAsyncRefOperationParameters.fromJson(value);
        case 'GitAsyncRefOperationSource':
          return GitAsyncRefOperationSource.fromJson(value);
        case 'GitBaseVersionDescriptor':
          return GitBaseVersionDescriptor.fromJson(value);
        case 'GitBlobRef':
          return GitBlobRef.fromJson(value);
        case 'GitBranchStats':
          return GitBranchStats.fromJson(value);
        case 'GitChange':
          return GitChange.fromJson(value);
        case 'GitCherryPick':
          return GitCherryPick.fromJson(value);
        case 'GitCommit':
          return GitCommit.fromJson(value);
        case 'GitCommitChanges':
          return GitCommitChanges.fromJson(value);
        case 'GitCommitDiffs':
          return GitCommitDiffs.fromJson(value);
        case 'GitCommitRef':
          return GitCommitRef.fromJson(value);
        case 'GitCommitToCreate':
          return GitCommitToCreate.fromJson(value);
        case 'GitConflict':
          return GitConflict.fromJson(value);
        case 'GitConflictAddAdd':
          return GitConflictAddAdd.fromJson(value);
        case 'GitConflictAddRename':
          return GitConflictAddRename.fromJson(value);
        case 'GitConflictDeleteEdit':
          return GitConflictDeleteEdit.fromJson(value);
        case 'GitConflictDeleteRename':
          return GitConflictDeleteRename.fromJson(value);
        case 'GitConflictDirectoryFile':
          return GitConflictDirectoryFile.fromJson(value);
        case 'GitConflictEditDelete':
          return GitConflictEditDelete.fromJson(value);
        case 'GitConflictEditEdit':
          return GitConflictEditEdit.fromJson(value);
        case 'GitConflictFileDirectory':
          return GitConflictFileDirectory.fromJson(value);
        case 'GitConflictRename1to2':
          return GitConflictRename1to2.fromJson(value);
        case 'GitConflictRename2to1':
          return GitConflictRename2to1.fromJson(value);
        case 'GitConflictRenameAdd':
          return GitConflictRenameAdd.fromJson(value);
        case 'GitConflictRenameDelete':
          return GitConflictRenameDelete.fromJson(value);
        case 'GitConflictRenameRename':
          return GitConflictRenameRename.fromJson(value);
        case 'GitConflictUpdateResult':
          return GitConflictUpdateResult.fromJson(value);
        case 'GitDeletedRepository':
          return GitDeletedRepository.fromJson(value);
        case 'GitFilePathsCollection':
          return GitFilePathsCollection.fromJson(value);
        case 'GitForkOperationStatusDetail':
          return GitForkOperationStatusDetail.fromJson(value);
        case 'GitForkRef':
          return GitForkRef.fromJson(value);
        case 'GitForkSyncRequest':
          return GitForkSyncRequest.fromJson(value);
        case 'GitForkSyncRequestParameters':
          return GitForkSyncRequestParameters.fromJson(value);
        case 'GitForkTeamProjectReference':
          return GitForkTeamProjectReference.fromJson(value);
        case 'GitHubArtifactDownloadInput':
          return GitHubArtifactDownloadInput.fromJson(value);
        case 'GitImportFailedEvent':
          return GitImportFailedEvent.fromJson(value);
        case 'GitImportGitSource':
          return GitImportGitSource.fromJson(value);
        case 'GitImportRequest':
          return GitImportRequest.fromJson(value);
        case 'GitImportRequestParameters':
          return GitImportRequestParameters.fromJson(value);
        case 'GitImportStatusDetail':
          return GitImportStatusDetail.fromJson(value);
        case 'GitImportSucceededEvent':
          return GitImportSucceededEvent.fromJson(value);
        case 'GitImportTfvcSource':
          return GitImportTfvcSource.fromJson(value);
        case 'GitItem':
          return GitItem.fromJson(value);
        case 'GitItemDescriptor':
          return GitItemDescriptor.fromJson(value);
        case 'GitItemRequestData':
          return GitItemRequestData.fromJson(value);
        case 'GitLastChangeItem':
          return GitLastChangeItem.fromJson(value);
        case 'GitLastChangeTreeItems':
          return GitLastChangeTreeItems.fromJson(value);
        case 'GitMerge':
          return GitMerge.fromJson(value);
        case 'GitMergeOperationStatusDetail':
          return GitMergeOperationStatusDetail.fromJson(value);
        case 'GitMergeOriginRef':
          return GitMergeOriginRef.fromJson(value);
        case 'GitMergeParameters':
          return GitMergeParameters.fromJson(value);
        case 'GitObject':
          return GitObject.fromJson(value);
        case 'GitPathAction':
          return GitPathAction.fromJson(value);
        case 'GitPathToItemsCollection':
          return GitPathToItemsCollection.fromJson(value);
        case 'GitPolicyConfigurationResponse':
          return GitPolicyConfigurationResponse.fromJson(value);
        case 'GitPullRequest':
          return GitPullRequest.fromJson(value);
        case 'GitPullRequestChange':
          return GitPullRequestChange.fromJson(value);
        case 'GitPullRequestCommentThread':
          return GitPullRequestCommentThread.fromJson(value);
        case 'GitPullRequestCommentThreadContext':
          return GitPullRequestCommentThreadContext.fromJson(value);
        case 'GitPullRequestCompletionOptions':
          return GitPullRequestCompletionOptions.fromJson(value);
        case 'GitPullRequestIteration':
          return GitPullRequestIteration.fromJson(value);
        case 'GitPullRequestIterationChanges':
          return GitPullRequestIterationChanges.fromJson(value);
        case 'GitPullRequestMergeOptions':
          return GitPullRequestMergeOptions.fromJson(value);
        case 'GitPullRequestQuery':
          return GitPullRequestQuery.fromJson(value);
        case 'GitPullRequestQueryInput':
          return GitPullRequestQueryInput.fromJson(value);
        case 'GitPullRequestReviewFileContentInfo':
          return GitPullRequestReviewFileContentInfo.fromJson(value);
        case 'GitPullRequestSearchCriteria':
          return GitPullRequestSearchCriteria.fromJson(value);
        case 'GitPullRequestStatus':
          return GitPullRequestStatus.fromJson(value);
        case 'GitPush':
          return GitPush.fromJson(value);
        case 'GitPushEventData':
          return GitPushEventData.fromJson(value);
        case 'GitPushRef':
          return GitPushRef.fromJson(value);
        case 'GitPushSearchCriteria':
          return GitPushSearchCriteria.fromJson(value);
        case 'GitQueryBranchStatsCriteria':
          return GitQueryBranchStatsCriteria.fromJson(value);
        case 'GitQueryCommitsCriteria':
          return GitQueryCommitsCriteria.fromJson(value);
        case 'GitQueryRefsCriteria':
          return GitQueryRefsCriteria.fromJson(value);
        case 'GitRecycleBinRepositoryDetails':
          return GitRecycleBinRepositoryDetails.fromJson(value);
        case 'GitRef':
          return GitRef.fromJson(value);
        case 'GitRefFavorite':
          return GitRefFavorite.fromJson(value);
        case 'GitRefUpdate':
          return GitRefUpdate.fromJson(value);
        case 'GitRefUpdateResult':
          return GitRefUpdateResult.fromJson(value);
        case 'GitRepository':
          return GitRepository.fromJson(value);
        case 'GitRepositoryCreateOptions':
          return GitRepositoryCreateOptions.fromJson(value);
        case 'GitRepositoryRef':
          return GitRepositoryRef.fromJson(value);
        case 'GitRepositoryStats':
          return GitRepositoryStats.fromJson(value);
        case 'GitResolution':
          return GitResolution.fromJson(value);
        case 'GitResolutionMergeContent':
          return GitResolutionMergeContent.fromJson(value);
        case 'GitResolutionPathConflict':
          return GitResolutionPathConflict.fromJson(value);
        case 'GitResolutionPickOneAction':
          return GitResolutionPickOneAction.fromJson(value);
        case 'GitResolutionRename1to2':
          return GitResolutionRename1to2.fromJson(value);
        case 'GitRevert':
          return GitRevert.fromJson(value);
        case 'GitStatus':
          return GitStatus.fromJson(value);
        case 'GitStatusContext':
          return GitStatusContext.fromJson(value);
        case 'GitSuggestion':
          return GitSuggestion.fromJson(value);
        case 'GitTargetVersionDescriptor':
          return GitTargetVersionDescriptor.fromJson(value);
        case 'GitTemplate':
          return GitTemplate.fromJson(value);
        case 'GitTreeDiff':
          return GitTreeDiff.fromJson(value);
        case 'GitTreeDiffEntry':
          return GitTreeDiffEntry.fromJson(value);
        case 'GitTreeDiffResponse':
          return GitTreeDiffResponse.fromJson(value);
        case 'GitTreeEntryRef':
          return GitTreeEntryRef.fromJson(value);
        case 'GitTreeRef':
          return GitTreeRef.fromJson(value);
        case 'GitUserDate':
          return GitUserDate.fromJson(value);
        case 'GitVersionDescriptor':
          return GitVersionDescriptor.fromJson(value);
        case 'GlobalGitRepositoryKey':
          return GlobalGitRepositoryKey.fromJson(value);
        case 'GlobalPermission':
          return GlobalPermission.fromJson(value);
        case 'GraphCachePolicies':
          return GraphCachePolicies.fromJson(value);
        case 'GraphDescriptorResult':
          return GraphDescriptorResult.fromJson(value);
        case 'GraphFederatedProviderData':
          return GraphFederatedProviderData.fromJson(value);
        case 'GraphGlobalExtendedPropertyBatch':
          return GraphGlobalExtendedPropertyBatch.fromJson(value);
        case 'GraphGroup':
          return GraphGroup.fromJson(value);
        case 'GraphGroupCreationContext':
          return GraphGroupCreationContext.fromJson(value);
        case 'GraphGroupMailAddressCreationContext':
          return GraphGroupMailAddressCreationContext.fromJson(value);
        case 'GraphGroupOriginIdCreationContext':
          return GraphGroupOriginIdCreationContext.fromJson(value);
        case 'GraphGroupVstsCreationContext':
          return GraphGroupVstsCreationContext.fromJson(value);
        case 'GraphMember':
          return GraphMember.fromJson(value);
        case 'GraphMembership':
          return GraphMembership.fromJson(value);
        case 'GraphMembershipState':
          return GraphMembershipState.fromJson(value);
        case 'GraphMembershipTraversal':
          return GraphMembershipTraversal.fromJson(value);
        case 'GraphProviderInfo':
          return GraphProviderInfo.fromJson(value);
        case 'GraphScope':
          return GraphScope.fromJson(value);
        case 'GraphScopeCreationContext':
          return GraphScopeCreationContext.fromJson(value);
        case 'GraphStorageKeyResult':
          return GraphStorageKeyResult.fromJson(value);
        case 'GraphSubject':
          return GraphSubject.fromJson(value);
        case 'GraphSubjectBase':
          return GraphSubjectBase.fromJson(value);
        case 'GraphSubjectLookup':
          return GraphSubjectLookup.fromJson(value);
        case 'GraphSubjectLookupKey':
          return GraphSubjectLookupKey.fromJson(value);
        case 'GraphSystemSubject':
          return GraphSystemSubject.fromJson(value);
        case 'GraphUser':
          return GraphUser.fromJson(value);
        case 'GraphUserCreationContext':
          return GraphUserCreationContext.fromJson(value);
        case 'GraphUserMailAddressCreationContext':
          return GraphUserMailAddressCreationContext.fromJson(value);
        case 'GraphUserOriginIdCreationContext':
          return GraphUserOriginIdCreationContext.fromJson(value);
        case 'GraphUserOriginIdUpdateContext':
          return GraphUserOriginIdUpdateContext.fromJson(value);
        case 'GraphUserPrincipalNameCreationContext':
          return GraphUserPrincipalNameCreationContext.fromJson(value);
        case 'Group':
          return Group.fromJson(value);
        case 'GroupEntitlement':
          return GroupEntitlement.fromJson(value);
        case 'GroupEntitlementOperationReference':
          return GroupEntitlementOperationReference.fromJson(value);
        case 'GroupOperationResult':
          return GroupOperationResult.fromJson(value);
        case 'GroupOption':
          return GroupOption.fromJson(value);
        case 'GroupSubscriptionChannel':
          return GroupSubscriptionChannel.fromJson(value);
        case 'HelpLink':
          return HelpLink.fromJson(value);
        case 'HideStateModel':
          return HideStateModel.fromJson(value);
        case 'HistoryEntry':
          return HistoryEntry.fromJson(value);
        case 'Hit':
          return Hit.fromJson(value);
        case 'HttpPostedTcmAttachment':
          return HttpPostedTcmAttachment.fromJson(value);
        case 'INotificationDiagnosticLog':
          return INotificationDiagnosticLog.fromJson(value);
        case 'ISubscriptionChannel':
          return ISubscriptionChannel.fromJson(value);
        case 'ISubscriptionFilter':
          return ISubscriptionFilter.fromJson(value);
        case 'Identity':
          return Identity.fromJson(value);
        case 'IdentityBase':
          return IdentityBase.fromJson(value);
        case 'IdentityData':
          return IdentityData.fromJson(value);
        case 'IdentityDescriptor':
          return IdentityDescriptor.fromJson(value);
        case 'IdentityRef':
          return IdentityRef.fromJson(value);
        case 'IdentityRefWithVote':
          return IdentityRefWithVote.fromJson(value);
        case 'IdentityReference':
          return IdentityReference.fromJson(value);
        case 'IgnoredGate':
          return IgnoredGate.fromJson(value);
        case 'ImportRepositoryValidation':
          return ImportRepositoryValidation.fromJson(value);
        case 'IncludedGitCommit':
          return IncludedGitCommit.fromJson(value);
        case 'InformationNode':
          return InformationNode.fromJson(value);
        case 'InputBindingContext':
          return InputBindingContext.fromJson(value);
        case 'InputDescriptor':
          return InputDescriptor.fromJson(value);
        case 'InputFilter':
          return InputFilter.fromJson(value);
        case 'InputFilterCondition':
          return InputFilterCondition.fromJson(value);
        case 'InputValidation':
          return InputValidation.fromJson(value);
        case 'InputValidationItem':
          return InputValidationItem.fromJson(value);
        case 'InputValidationRequest':
          return InputValidationRequest.fromJson(value);
        case 'InputValue':
          return InputValue.fromJson(value);
        case 'InputValues':
          return InputValues.fromJson(value);
        case 'InputValuesError':
          return InputValuesError.fromJson(value);
        case 'InputValuesQuery':
          return InputValuesQuery.fromJson(value);
        case 'InstallationTarget':
          return InstallationTarget.fromJson(value);
        case 'InstalledExtension':
          return InstalledExtension.fromJson(value);
        case 'InstalledExtensionQuery':
          return InstalledExtensionQuery.fromJson(value);
        case 'InstalledExtensionState':
          return InstalledExtensionState.fromJson(value);
        case 'InstalledExtensionStateIssue':
          return InstalledExtensionStateIssue.fromJson(value);
        case 'IsDraftUpdatedEvent':
          return IsDraftUpdatedEvent.fromJson(value);
        case 'Issue':
          return Issue.fromJson(value);
        case 'ItemContent':
          return ItemContent.fromJson(value);
        case 'ItemDetailsOptions':
          return ItemDetailsOptions.fromJson(value);
        case 'ItemModel':
          return ItemModel.fromJson(value);
        case 'IterationWorkItems':
          return IterationWorkItems.fromJson(value);
        case 'JObject':
          return JObject.fromJson(value);
        case 'JToken':
          return JToken.fromJson(value);
        case 'JenkinsArtifactDownloadInput':
          return JenkinsArtifactDownloadInput.fromJson(value);
        case 'JobAssignedEvent':
          return JobAssignedEvent.fromJson(value);
        case 'JobCancelMessage':
          return JobCancelMessage.fromJson(value);
        case 'JobCompletedEvent':
          return JobCompletedEvent.fromJson(value);
        case 'JobEnvironment':
          return JobEnvironment.fromJson(value);
        case 'JobEvent':
          return JobEvent.fromJson(value);
        case 'JobEventConfig':
          return JobEventConfig.fromJson(value);
        case 'JobEventsConfig':
          return JobEventsConfig.fromJson(value);
        case 'JobOption':
          return JobOption.fromJson(value);
        case 'JobReference':
          return JobReference.fromJson(value);
        case 'JobRequestMessage':
          return JobRequestMessage.fromJson(value);
        case 'JobStartedEvent':
          return JobStartedEvent.fromJson(value);
        case 'JsonBlobBlockHash':
          return JsonBlobBlockHash.fromJson(value);
        case 'JsonBlobIdentifier':
          return JsonBlobIdentifier.fromJson(value);
        case 'JsonBlobIdentifierWithBlocks':
          return JsonBlobIdentifierWithBlocks.fromJson(value);
        case 'JsonPatchDocument':
          return JsonPatchDocument.fromJson(value);
        case 'JsonPatchOperation':
          return JsonPatchOperation.fromJson(value);
        case 'JustInTimeProcess':
          return JustInTimeProcess.fromJson(value);
        case 'KubernetesResource':
          return KubernetesResource.fromJson(value);
        case 'KubernetesResourceCreateParameters':
          return KubernetesResourceCreateParameters.fromJson(value);
        case 'LabelsUpdatedEvent':
          return LabelsUpdatedEvent.fromJson(value);
        case 'LastResultDetails':
          return LastResultDetails.fromJson(value);
        case 'LegacyBuildConfiguration':
          return LegacyBuildConfiguration.fromJson(value);
        case 'LegacyReleaseReference':
          return LegacyReleaseReference.fromJson(value);
        case 'LegacyTestCaseResult':
          return LegacyTestCaseResult.fromJson(value);
        case 'LegacyTestCaseResultIdentifier':
          return LegacyTestCaseResultIdentifier.fromJson(value);
        case 'LegacyTestRun':
          return LegacyTestRun.fromJson(value);
        case 'LegacyTestRunStatistic':
          return LegacyTestRunStatistic.fromJson(value);
        case 'LegacyTestSettings':
          return LegacyTestSettings.fromJson(value);
        case 'LicenseSummaryData':
          return LicenseSummaryData.fromJson(value);
        case 'LicensingOverride':
          return LicensingOverride.fromJson(value);
        case 'LightboxOptions':
          return LightboxOptions.fromJson(value);
        case 'LineBlockCoverage':
          return LineBlockCoverage.fromJson(value);
        case 'LineDiffBlock':
          return LineDiffBlock.fromJson(value);
        case 'Link':
          return Link.fromJson(value);
        case 'LinkedWorkItemsQuery':
          return LinkedWorkItemsQuery.fromJson(value);
        case 'LinkedWorkItemsQueryResult':
          return LinkedWorkItemsQueryResult.fromJson(value);
        case 'LoadGenerationGeoLocation':
          return LoadGenerationGeoLocation.fromJson(value);
        case 'LoadTestDefinition':
          return LoadTestDefinition.fromJson(value);
        case 'LoadTestErrors':
          return LoadTestErrors.fromJson(value);
        case 'LoadTestRunDetails':
          return LoadTestRunDetails.fromJson(value);
        case 'LoadTestRunSettings':
          return LoadTestRunSettings.fromJson(value);
        case 'MachineGroupBasedDeployPhase':
          return MachineGroupBasedDeployPhase.fromJson(value);
        case 'MachineGroupDeploymentInput':
          return MachineGroupDeploymentInput.fromJson(value);
        case 'MailMessage':
          return MailMessage.fromJson(value);
        case 'ManualIntervention':
          return ManualIntervention.fromJson(value);
        case 'ManualInterventionUpdateMetadata':
          return ManualInterventionUpdateMetadata.fromJson(value);
        case 'MappingDetails':
          return MappingDetails.fromJson(value);
        case 'Marker':
          return Marker.fromJson(value);
        case 'MarketplacePurchasedLicense':
          return MarketplacePurchasedLicense.fromJson(value);
        case 'MaskHint':
          return MaskHint.fromJson(value);
        case 'MatcherResult':
          return MatcherResult.fromJson(value);
        case 'MavenDistributionManagement':
          return MavenDistributionManagement.fromJson(value);
        case 'MavenMinimalPackageDetails':
          return MavenMinimalPackageDetails.fromJson(value);
        case 'MavenPackage':
          return MavenPackage.fromJson(value);
        case 'MavenPackageVersionDeletionState':
          return MavenPackageVersionDeletionState.fromJson(value);
        case 'MavenPackagesBatchRequest':
          return MavenPackagesBatchRequest.fromJson(value);
        case 'MavenPomBuild':
          return MavenPomBuild.fromJson(value);
        case 'MavenPomCi':
          return MavenPomCi.fromJson(value);
        case 'MavenPomCiNotifier':
          return MavenPomCiNotifier.fromJson(value);
        case 'MavenPomDependency':
          return MavenPomDependency.fromJson(value);
        case 'MavenPomDependencyManagement':
          return MavenPomDependencyManagement.fromJson(value);
        case 'MavenPomGav':
          return MavenPomGav.fromJson(value);
        case 'MavenPomIssueManagement':
          return MavenPomIssueManagement.fromJson(value);
        case 'MavenPomLicense':
          return MavenPomLicense.fromJson(value);
        case 'MavenPomMailingList':
          return MavenPomMailingList.fromJson(value);
        case 'MavenPomMetadata':
          return MavenPomMetadata.fromJson(value);
        case 'MavenPomOrganization':
          return MavenPomOrganization.fromJson(value);
        case 'MavenPomParent':
          return MavenPomParent.fromJson(value);
        case 'MavenPomPerson':
          return MavenPomPerson.fromJson(value);
        case 'MavenPomScm':
          return MavenPomScm.fromJson(value);
        case 'MavenRecycleBinPackageVersionDetails':
          return MavenRecycleBinPackageVersionDetails.fromJson(value);
        case 'MavenRepository':
          return MavenRepository.fromJson(value);
        case 'MavenSnapshotRepository':
          return MavenSnapshotRepository.fromJson(value);
        case 'Member':
          return Member.fromJson(value);
        case 'MemberEntitlement':
          return MemberEntitlement.fromJson(value);
        case 'MemberEntitlementOperationReference':
          return MemberEntitlementOperationReference.fromJson(value);
        case 'MemberEntitlementsPatchResponse':
          return MemberEntitlementsPatchResponse.fromJson(value);
        case 'MemberEntitlementsPostResponse':
          return MemberEntitlementsPostResponse.fromJson(value);
        case 'MemberEntitlementsResponseBase':
          return MemberEntitlementsResponseBase.fromJson(value);
        case 'MergeCompletedEvent':
          return MergeCompletedEvent.fromJson(value);
        case 'MessageQueueSubscriptionChannel':
          return MessageQueueSubscriptionChannel.fromJson(value);
        case 'Metric':
          return Metric.fromJson(value);
        case 'MetricsColumnMetaData':
          return MetricsColumnMetaData.fromJson(value);
        case 'MetricsColumnsHeader':
          return MetricsColumnsHeader.fromJson(value);
        case 'MetricsRow':
          return MetricsRow.fromJson(value);
        case 'MinimalPackageDetails':
          return MinimalPackageDetails.fromJson(value);
        case 'MinimalPackageVersion':
          return MinimalPackageVersion.fromJson(value);
        case 'ModuleCoverage':
          return ModuleCoverage.fromJson(value);
        case 'ModuleCoverage2':
          return ModuleCoverage2.fromJson(value);
        case 'MultiConfigInput':
          return MultiConfigInput.fromJson(value);
        case 'MultiMachineInput':
          return MultiMachineInput.fromJson(value);
        case 'MultipleAgentExecutionOptions':
          return MultipleAgentExecutionOptions.fromJson(value);
        case 'NameValuePair':
          return NameValuePair.fromJson(value);
        case 'Notification':
          return Notification.fromJson(value);
        case 'NotificationAdminSettings':
          return NotificationAdminSettings.fromJson(value);
        case 'NotificationAdminSettingsUpdateParameters':
          return NotificationAdminSettingsUpdateParameters.fromJson(value);
        case 'NotificationBacklogStatus':
          return NotificationBacklogStatus.fromJson(value);
        case 'NotificationBatch':
          return NotificationBatch.fromJson(value);
        case 'NotificationDeliveryLog':
          return NotificationDeliveryLog.fromJson(value);
        case 'NotificationDetails':
          return NotificationDetails.fromJson(value);
        case 'NotificationDiagnosticLog':
          return NotificationDiagnosticLog.fromJson(value);
        case 'NotificationDiagnosticLogMessage':
          return NotificationDiagnosticLogMessage.fromJson(value);
        case 'NotificationEventBacklogStatus':
          return NotificationEventBacklogStatus.fromJson(value);
        case 'NotificationEventField':
          return NotificationEventField.fromJson(value);
        case 'NotificationEventFieldOperator':
          return NotificationEventFieldOperator.fromJson(value);
        case 'NotificationEventFieldType':
          return NotificationEventFieldType.fromJson(value);
        case 'NotificationEventPublisher':
          return NotificationEventPublisher.fromJson(value);
        case 'NotificationEventRole':
          return NotificationEventRole.fromJson(value);
        case 'NotificationEventType':
          return NotificationEventType.fromJson(value);
        case 'NotificationEventTypeCategory':
          return NotificationEventTypeCategory.fromJson(value);
        case 'NotificationJobDiagnosticLog':
          return NotificationJobDiagnosticLog.fromJson(value);
        case 'NotificationQueryCondition':
          return NotificationQueryCondition.fromJson(value);
        case 'NotificationReason':
          return NotificationReason.fromJson(value);
        case 'NotificationResultsSummaryDetail':
          return NotificationResultsSummaryDetail.fromJson(value);
        case 'NotificationStatistic':
          return NotificationStatistic.fromJson(value);
        case 'NotificationStatisticsQuery':
          return NotificationStatisticsQuery.fromJson(value);
        case 'NotificationStatisticsQueryConditions':
          return NotificationStatisticsQueryConditions.fromJson(value);
        case 'NotificationSubscriber':
          return NotificationSubscriber.fromJson(value);
        case 'NotificationSubscriberUpdateParameters':
          return NotificationSubscriberUpdateParameters.fromJson(value);
        case 'NotificationSubscription':
          return NotificationSubscription.fromJson(value);
        case 'NotificationSubscriptionCreateParameters':
          return NotificationSubscriptionCreateParameters.fromJson(value);
        case 'NotificationSubscriptionTemplate':
          return NotificationSubscriptionTemplate.fromJson(value);
        case 'NotificationSubscriptionUpdateParameters':
          return NotificationSubscriptionUpdateParameters.fromJson(value);
        case 'NotificationSummary':
          return NotificationSummary.fromJson(value);
        case 'NotificationsEvaluationResult':
          return NotificationsEvaluationResult.fromJson(value);
        case 'NotificationsQuery':
          return NotificationsQuery.fromJson(value);
        case 'NpmPackageVersionDeletionState':
          return NpmPackageVersionDeletionState.fromJson(value);
        case 'NpmPackagesBatchRequest':
          return NpmPackagesBatchRequest.fromJson(value);
        case 'NpmRecycleBinPackageVersionDetails':
          return NpmRecycleBinPackageVersionDetails.fromJson(value);
        case 'NuGetPackageVersionDeletionState':
          return NuGetPackageVersionDeletionState.fromJson(value);
        case 'NuGetPackagesBatchRequest':
          return NuGetPackagesBatchRequest.fromJson(value);
        case 'NuGetRecycleBinPackageVersionDetails':
          return NuGetRecycleBinPackageVersionDetails.fromJson(value);
        case 'OAuth2TokenResult':
          return OAuth2TokenResult.fromJson(value);
        case 'OAuthConfiguration':
          return OAuthConfiguration.fromJson(value);
        case 'OAuthConfigurationParams':
          return OAuthConfigurationParams.fromJson(value);
        case 'OAuthEndpointStatus':
          return OAuthEndpointStatus.fromJson(value);
        case 'Operation':
          return Operation.fromJson(value);
        case 'OperationReference':
          return OperationReference.fromJson(value);
        case 'OperationResult':
          return OperationResult.fromJson(value);
        case 'OperationResultReference':
          return OperationResultReference.fromJson(value);
        case 'OperatorConstraint':
          return OperatorConstraint.fromJson(value);
        case 'OverridableRunSettings':
          return OverridableRunSettings.fromJson(value);
        case 'Package':
          return Package.fromJson(value);
        case 'PackageChange':
          return PackageChange.fromJson(value);
        case 'PackageChangesResponse':
          return PackageChangesResponse.fromJson(value);
        case 'PackageDependency':
          return PackageDependency.fromJson(value);
        case 'PackageFile':
          return PackageFile.fromJson(value);
        case 'PackageHit':
          return PackageHit.fromJson(value);
        case 'PackageMetadata':
          return PackageMetadata.fromJson(value);
        case 'PackageMetrics':
          return PackageMetrics.fromJson(value);
        case 'PackageMetricsQuery':
          return PackageMetricsQuery.fromJson(value);
        case 'PackageResult':
          return PackageResult.fromJson(value);
        case 'PackageSearchRequest':
          return PackageSearchRequest.fromJson(value);
        case 'PackageSearchResponse':
          return PackageSearchResponse.fromJson(value);
        case 'PackageSearchResponseContent':
          return PackageSearchResponseContent.fromJson(value);
        case 'PackageTrigger':
          return PackageTrigger.fromJson(value);
        case 'PackageVersion':
          return PackageVersion.fromJson(value);
        case 'PackageVersionChange':
          return PackageVersionChange.fromJson(value);
        case 'PackageVersionDetails':
          return PackageVersionDetails.fromJson(value);
        case 'PackageVersionMetrics':
          return PackageVersionMetrics.fromJson(value);
        case 'PackageVersionMetricsQuery':
          return PackageVersionMetricsQuery.fromJson(value);
        case 'PackageVersionProvenance':
          return PackageVersionProvenance.fromJson(value);
        case 'Page':
          return Page.fromJson(value);
        case 'PageSummary':
          return PageSummary.fromJson(value);
        case 'PagedGraphGroups':
          return PagedGraphGroups.fromJson(value);
        case 'PagedGraphMemberList':
          return PagedGraphMemberList.fromJson(value);
        case 'PagedGraphUsers':
          return PagedGraphUsers.fromJson(value);
        case 'ParallelExecutionInputBase':
          return ParallelExecutionInputBase.fromJson(value);
        case 'Parameter':
          return Parameter.fromJson(value);
        case 'ParentChildWIMap':
          return ParentChildWIMap.fromJson(value);
        case 'PermissionEvaluation':
          return PermissionEvaluation.fromJson(value);
        case 'PermissionEvaluationBatch':
          return PermissionEvaluationBatch.fromJson(value);
        case 'Phase':
          return Phase.fromJson(value);
        case 'PhaseReference':
          return PhaseReference.fromJson(value);
        case 'PhaseTarget':
          return PhaseTarget.fromJson(value);
        case 'PickList':
          return PickList.fromJson(value);
        case 'PickListMetadata':
          return PickListMetadata.fromJson(value);
        case 'PipelineProcess':
          return PipelineProcess.fromJson(value);
        case 'PipelineReference':
          return PipelineReference.fromJson(value);
        case 'Plan':
          return Plan.fromJson(value);
        case 'PlanEnvironment':
          return PlanEnvironment.fromJson(value);
        case 'PlanMetadata':
          return PlanMetadata.fromJson(value);
        case 'PlanUpdateModel':
          return PlanUpdateModel.fromJson(value);
        case 'PlanViewData':
          return PlanViewData.fromJson(value);
        case 'Plugin':
          return Plugin.fromJson(value);
        case 'PluginConfiguration':
          return PluginConfiguration.fromJson(value);
        case 'PointAssignment':
          return PointAssignment.fromJson(value);
        case 'PointLastResult':
          return PointLastResult.fromJson(value);
        case 'PointUpdateModel':
          return PointUpdateModel.fromJson(value);
        case 'PointWorkItemProperty':
          return PointWorkItemProperty.fromJson(value);
        case 'PointsFilter':
          return PointsFilter.fromJson(value);
        case 'PointsReference2':
          return PointsReference2.fromJson(value);
        case 'PointsResults2':
          return PointsResults2.fromJson(value);
        case 'PolicyConfiguration':
          return PolicyConfiguration.fromJson(value);
        case 'PolicyConfigurationRef':
          return PolicyConfigurationRef.fromJson(value);
        case 'PolicyEvaluationRecord':
          return PolicyEvaluationRecord.fromJson(value);
        case 'PolicyEvaluationUpdatedEvent':
          return PolicyEvaluationUpdatedEvent.fromJson(value);
        case 'PolicyType':
          return PolicyType.fromJson(value);
        case 'PolicyTypeRef':
          return PolicyTypeRef.fromJson(value);
        case 'PredefinedQuery':
          return PredefinedQuery.fromJson(value);
        case 'Process':
          return Process.fromJson(value);
        case 'ProcessBehavior':
          return ProcessBehavior.fromJson(value);
        case 'ProcessBehaviorCreateRequest':
          return ProcessBehaviorCreateRequest.fromJson(value);
        case 'ProcessBehaviorField':
          return ProcessBehaviorField.fromJson(value);
        case 'ProcessBehaviorReference':
          return ProcessBehaviorReference.fromJson(value);
        case 'ProcessBehaviorUpdateRequest':
          return ProcessBehaviorUpdateRequest.fromJson(value);
        case 'ProcessConfiguration':
          return ProcessConfiguration.fromJson(value);
        case 'ProcessImportResult':
          return ProcessImportResult.fromJson(value);
        case 'ProcessInfo':
          return ProcessInfo.fromJson(value);
        case 'ProcessModel':
          return ProcessModel.fromJson(value);
        case 'ProcessParameters':
          return ProcessParameters.fromJson(value);
        case 'ProcessPromoteStatus':
          return ProcessPromoteStatus.fromJson(value);
        case 'ProcessProperties':
          return ProcessProperties.fromJson(value);
        case 'ProcessReference':
          return ProcessReference.fromJson(value);
        case 'ProcessRule':
          return ProcessRule.fromJson(value);
        case 'ProcessWorkItemType':
          return ProcessWorkItemType.fromJson(value);
        case 'ProcessWorkItemTypeField':
          return ProcessWorkItemTypeField.fromJson(value);
        case 'ProcessedEvent':
          return ProcessedEvent.fromJson(value);
        case 'ProcessingDiagnosticIdentity':
          return ProcessingDiagnosticIdentity.fromJson(value);
        case 'ProcessingIdentities':
          return ProcessingIdentities.fromJson(value);
        case 'Profile':
          return Profile.fromJson(value);
        case 'ProfileAttribute':
          return ProfileAttribute.fromJson(value);
        case 'ProfileAttributeBase':
          return ProfileAttributeBase.fromJson(value);
        case 'ProfileRegion':
          return ProfileRegion.fromJson(value);
        case 'ProfileRegions':
          return ProfileRegions.fromJson(value);
        case 'Project':
          return Project.fromJson(value);
        case 'ProjectAvatar':
          return ProjectAvatar.fromJson(value);
        case 'ProjectEntitlement':
          return ProjectEntitlement.fromJson(value);
        case 'ProjectInfo':
          return ProjectInfo.fromJson(value);
        case 'ProjectMessage':
          return ProjectMessage.fromJson(value);
        case 'ProjectProperties':
          return ProjectProperties.fromJson(value);
        case 'ProjectProperty':
          return ProjectProperty.fromJson(value);
        case 'ProjectRef':
          return ProjectRef.fromJson(value);
        case 'ProjectReference':
          return ProjectReference.fromJson(value);
        case 'ProjectWorkItemStateColors':
          return ProjectWorkItemStateColors.fromJson(value);
        case 'PropertiesCollection':
          return PropertiesCollection.fromJson(value);
        case 'PropertyBag':
          return PropertyBag.fromJson(value);
        case 'PropertySelector':
          return PropertySelector.fromJson(value);
        case 'ProtocolMetadata':
          return ProtocolMetadata.fromJson(value);
        case 'Provenance':
          return Provenance.fromJson(value);
        case 'ProvisioningResult':
          return ProvisioningResult.fromJson(value);
        case 'Proxy':
          return Proxy.fromJson(value);
        case 'ProxyAuthorization':
          return ProxyAuthorization.fromJson(value);
        case 'PublicKey':
          return PublicKey.fromJson(value);
        case 'PublishTaskGroupMetadata':
          return PublishTaskGroupMetadata.fromJson(value);
        case 'PublishedExtension':
          return PublishedExtension.fromJson(value);
        case 'Publisher':
          return Publisher.fromJson(value);
        case 'PublisherEvent':
          return PublisherEvent.fromJson(value);
        case 'PublisherFacts':
          return PublisherFacts.fromJson(value);
        case 'PublishersQuery':
          return PublishersQuery.fromJson(value);
        case 'PullRequest':
          return PullRequest.fromJson(value);
        case 'PullRequestConfiguration':
          return PullRequestConfiguration.fromJson(value);
        case 'PullRequestCreatedEvent':
          return PullRequestCreatedEvent.fromJson(value);
        case 'PullRequestFilter':
          return PullRequestFilter.fromJson(value);
        case 'PullRequestTabExtensionConfig':
          return PullRequestTabExtensionConfig.fromJson(value);
        case 'PullRequestTrigger':
          return PullRequestTrigger.fromJson(value);
        case 'PyPiPackageVersionDeletionState':
          return PyPiPackageVersionDeletionState.fromJson(value);
        case 'PyPiPackagesBatchRequest':
          return PyPiPackagesBatchRequest.fromJson(value);
        case 'PyPiRecycleBinPackageVersionDetails':
          return PyPiRecycleBinPackageVersionDetails.fromJson(value);
        case 'QueryBatchGetRequest':
          return QueryBatchGetRequest.fromJson(value);
        case 'QueryByPointRequest':
          return QueryByPointRequest.fromJson(value);
        case 'QueryByRunRequest':
          return QueryByRunRequest.fromJson(value);
        case 'QueryHierarchyItem':
          return QueryHierarchyItem.fromJson(value);
        case 'QueryHierarchyItemsResult':
          return QueryHierarchyItemsResult.fromJson(value);
        case 'QueryModel':
          return QueryModel.fromJson(value);
        case 'QueryTestActionResultRequest':
          return QueryTestActionResultRequest.fromJson(value);
        case 'QueryTestActionResultResponse':
          return QueryTestActionResultResponse.fromJson(value);
        case 'QueryTestMessageLogEntryRequest':
          return QueryTestMessageLogEntryRequest.fromJson(value);
        case 'QueryTestRunStatsRequest':
          return QueryTestRunStatsRequest.fromJson(value);
        case 'QueryTestRuns2Request':
          return QueryTestRuns2Request.fromJson(value);
        case 'QueryTestRunsRequest':
          return QueryTestRunsRequest.fromJson(value);
        case 'QueuedReleaseData':
          return QueuedReleaseData.fromJson(value);
        case 'RealTimePullRequestEvent':
          return RealTimePullRequestEvent.fromJson(value);
        case 'RealtimeBuildEvent':
          return RealtimeBuildEvent.fromJson(value);
        case 'RealtimeReleaseDefinitionEvent':
          return RealtimeReleaseDefinitionEvent.fromJson(value);
        case 'RealtimeReleaseEvent':
          return RealtimeReleaseEvent.fromJson(value);
        case 'RecycleBinPackageVersion':
          return RecycleBinPackageVersion.fromJson(value);
        case 'ReferenceLink':
          return ReferenceLink.fromJson(value);
        case 'ReferenceLinks':
          return ReferenceLinks.fromJson(value);
        case 'Release':
          return Release.fromJson(value);
        case 'ReleaseAbandonedEvent':
          return ReleaseAbandonedEvent.fromJson(value);
        case 'ReleaseApproval':
          return ReleaseApproval.fromJson(value);
        case 'ReleaseApprovalHistory':
          return ReleaseApprovalHistory.fromJson(value);
        case 'ReleaseApprovalPendingEvent':
          return ReleaseApprovalPendingEvent.fromJson(value);
        case 'ReleaseArtifact':
          return ReleaseArtifact.fromJson(value);
        case 'ReleaseCondition':
          return ReleaseCondition.fromJson(value);
        case 'ReleaseCreatedEvent':
          return ReleaseCreatedEvent.fromJson(value);
        case 'ReleaseDefinition':
          return ReleaseDefinition.fromJson(value);
        case 'ReleaseDefinitionApprovalStep':
          return ReleaseDefinitionApprovalStep.fromJson(value);
        case 'ReleaseDefinitionApprovals':
          return ReleaseDefinitionApprovals.fromJson(value);
        case 'ReleaseDefinitionDeployStep':
          return ReleaseDefinitionDeployStep.fromJson(value);
        case 'ReleaseDefinitionEnvironment':
          return ReleaseDefinitionEnvironment.fromJson(value);
        case 'ReleaseDefinitionEnvironmentStep':
          return ReleaseDefinitionEnvironmentStep.fromJson(value);
        case 'ReleaseDefinitionEnvironmentSummary':
          return ReleaseDefinitionEnvironmentSummary.fromJson(value);
        case 'ReleaseDefinitionEnvironmentTemplate':
          return ReleaseDefinitionEnvironmentTemplate.fromJson(value);
        case 'ReleaseDefinitionGate':
          return ReleaseDefinitionGate.fromJson(value);
        case 'ReleaseDefinitionGatesOptions':
          return ReleaseDefinitionGatesOptions.fromJson(value);
        case 'ReleaseDefinitionGatesStep':
          return ReleaseDefinitionGatesStep.fromJson(value);
        case 'ReleaseDefinitionRevision':
          return ReleaseDefinitionRevision.fromJson(value);
        case 'ReleaseDefinitionShallowReference':
          return ReleaseDefinitionShallowReference.fromJson(value);
        case 'ReleaseDefinitionSummary':
          return ReleaseDefinitionSummary.fromJson(value);
        case 'ReleaseDefinitionUndeleteParameter':
          return ReleaseDefinitionUndeleteParameter.fromJson(value);
        case 'ReleaseDeployPhase':
          return ReleaseDeployPhase.fromJson(value);
        case 'ReleaseEnvironment':
          return ReleaseEnvironment.fromJson(value);
        case 'ReleaseEnvironmentCompletedEvent':
          return ReleaseEnvironmentCompletedEvent.fromJson(value);
        case 'ReleaseEnvironmentDefinitionReference':
          return ReleaseEnvironmentDefinitionReference.fromJson(value);
        case 'ReleaseEnvironmentShallowReference':
          return ReleaseEnvironmentShallowReference.fromJson(value);
        case 'ReleaseEnvironmentStatusUpdatedEvent':
          return ReleaseEnvironmentStatusUpdatedEvent.fromJson(value);
        case 'ReleaseEnvironmentUpdateMetadata':
          return ReleaseEnvironmentUpdateMetadata.fromJson(value);
        case 'ReleaseGates':
          return ReleaseGates.fromJson(value);
        case 'ReleaseGatesPhase':
          return ReleaseGatesPhase.fromJson(value);
        case 'ReleaseManagementInputValue':
          return ReleaseManagementInputValue.fromJson(value);
        case 'ReleaseNotCreatedEvent':
          return ReleaseNotCreatedEvent.fromJson(value);
        case 'ReleaseReference':
          return ReleaseReference.fromJson(value);
        case 'ReleaseReference2':
          return ReleaseReference2.fromJson(value);
        case 'ReleaseRevision':
          return ReleaseRevision.fromJson(value);
        case 'ReleaseSchedule':
          return ReleaseSchedule.fromJson(value);
        case 'ReleaseSettings':
          return ReleaseSettings.fromJson(value);
        case 'ReleaseShallowReference':
          return ReleaseShallowReference.fromJson(value);
        case 'ReleaseStartEnvironmentMetadata':
          return ReleaseStartEnvironmentMetadata.fromJson(value);
        case 'ReleaseStartMetadata':
          return ReleaseStartMetadata.fromJson(value);
        case 'ReleaseTask':
          return ReleaseTask.fromJson(value);
        case 'ReleaseTaskAttachment':
          return ReleaseTaskAttachment.fromJson(value);
        case 'ReleaseTaskLogUpdatedEvent':
          return ReleaseTaskLogUpdatedEvent.fromJson(value);
        case 'ReleaseTasksUpdatedEvent':
          return ReleaseTasksUpdatedEvent.fromJson(value);
        case 'ReleaseTriggerBase':
          return ReleaseTriggerBase.fromJson(value);
        case 'ReleaseUpdateMetadata':
          return ReleaseUpdateMetadata.fromJson(value);
        case 'ReleaseUpdatedEvent':
          return ReleaseUpdatedEvent.fromJson(value);
        case 'ReleaseWorkItemRef':
          return ReleaseWorkItemRef.fromJson(value);
        case 'ReorderOperation':
          return ReorderOperation.fromJson(value);
        case 'ReorderResult':
          return ReorderResult.fromJson(value);
        case 'ReportingWorkItemLinksBatch':
          return ReportingWorkItemLinksBatch.fromJson(value);
        case 'ReportingWorkItemRevisionsBatch':
          return ReportingWorkItemRevisionsBatch.fromJson(value);
        case 'ReportingWorkItemRevisionsFilter':
          return ReportingWorkItemRevisionsFilter.fromJson(value);
        case 'Repository':
          return Repository.fromJson(value);
        case 'RepositoryWebhook':
          return RepositoryWebhook.fromJson(value);
        case 'Request':
          return Request.fromJson(value);
        case 'RequestSummary':
          return RequestSummary.fromJson(value);
        case 'RequestedExtension':
          return RequestedExtension.fromJson(value);
        case 'RequirementsToTestsMapping2':
          return RequirementsToTestsMapping2.fromJson(value);
        case 'ResetTestResultsRequest':
          return ResetTestResultsRequest.fromJson(value);
        case 'ResolvedDataProvider':
          return ResolvedDataProvider.fromJson(value);
        case 'ResourceBase':
          return ResourceBase.fromJson(value);
        case 'ResourceContainer':
          return ResourceContainer.fromJson(value);
        case 'ResourceFilterOptions':
          return ResourceFilterOptions.fromJson(value);
        case 'ResourceFilters':
          return ResourceFilters.fromJson(value);
        case 'ResourceItem':
          return ResourceItem.fromJson(value);
        case 'ResourceLimit':
          return ResourceLimit.fromJson(value);
        case 'ResourceRef':
          return ResourceRef.fromJson(value);
        case 'ResourceReference':
          return ResourceReference.fromJson(value);
        case 'ResourceUsage':
          return ResourceUsage.fromJson(value);
        case 'ResourcesHubData':
          return ResourcesHubData.fromJson(value);
        case 'Response':
          return Response.fromJson(value);
        case 'ResultRetentionSettings':
          return ResultRetentionSettings.fromJson(value);
        case 'ResultTransformationDetails':
          return ResultTransformationDetails.fromJson(value);
        case 'ResultUpdateRequest':
          return ResultUpdateRequest.fromJson(value);
        case 'ResultUpdateRequestModel':
          return ResultUpdateRequestModel.fromJson(value);
        case 'ResultUpdateResponse':
          return ResultUpdateResponse.fromJson(value);
        case 'ResultUpdateResponseModel':
          return ResultUpdateResponseModel.fromJson(value);
        case 'Results':
          return Results.fromJson(value);
        case 'ResultsByQueryRequest':
          return ResultsByQueryRequest.fromJson(value);
        case 'ResultsByQueryResponse':
          return ResultsByQueryResponse.fromJson(value);
        case 'ResultsFilter':
          return ResultsFilter.fromJson(value);
        case 'ResultsStoreQuery':
          return ResultsStoreQuery.fromJson(value);
        case 'RetargetEvent':
          return RetargetEvent.fromJson(value);
        case 'RetentionPolicy':
          return RetentionPolicy.fromJson(value);
        case 'RetentionSettings':
          return RetentionSettings.fromJson(value);
        case 'ReviewerVoteUpdatedEvent':
          return ReviewerVoteUpdatedEvent.fromJson(value);
        case 'ReviewersUpdatedEvent':
          return ReviewersUpdatedEvent.fromJson(value);
        case 'ReviewersVotesResetEvent':
          return ReviewersVotesResetEvent.fromJson(value);
        case 'RoleBasedFilter':
          return RoleBasedFilter.fromJson(value);
        case 'Rule':
          return Rule.fromJson(value);
        case 'RuleAction':
          return RuleAction.fromJson(value);
        case 'RuleActionModel':
          return RuleActionModel.fromJson(value);
        case 'RuleCondition':
          return RuleCondition.fromJson(value);
        case 'RuleConditionModel':
          return RuleConditionModel.fromJson(value);
        case 'RunCreateModel':
          return RunCreateModel.fromJson(value);
        case 'RunFilter':
          return RunFilter.fromJson(value);
        case 'RunOnServerDeployPhase':
          return RunOnServerDeployPhase.fromJson(value);
        case 'RunStatistic':
          return RunStatistic.fromJson(value);
        case 'RunSummaryModel':
          return RunSummaryModel.fromJson(value);
        case 'RunUpdateModel':
          return RunUpdateModel.fromJson(value);
        case 'SaveCachedPackagesData':
          return SaveCachedPackagesData.fromJson(value);
        case 'ScenarioSummary':
          return ScenarioSummary.fromJson(value);
        case 'Schedule':
          return Schedule.fromJson(value);
        case 'ScheduleTrigger':
          return ScheduleTrigger.fromJson(value);
        case 'ScheduledReleaseTrigger':
          return ScheduledReleaseTrigger.fromJson(value);
        case 'Scope':
          return Scope.fromJson(value);
        case 'ScrollSearchRequest':
          return ScrollSearchRequest.fromJson(value);
        case 'Section':
          return Section.fromJson(value);
        case 'SecureFile':
          return SecureFile.fromJson(value);
        case 'SecureFileEvent':
          return SecureFileEvent.fromJson(value);
        case 'SecureFileReference':
          return SecureFileReference.fromJson(value);
        case 'SecurityNamespaceDescription':
          return SecurityNamespaceDescription.fromJson(value);
        case 'SemanticVersion':
          return SemanticVersion.fromJson(value);
        case 'SendJobResponse':
          return SendJobResponse.fromJson(value);
        case 'ServerDeploymentInput':
          return ServerDeploymentInput.fromJson(value);
        case 'ServerExecutionDefinition':
          return ServerExecutionDefinition.fromJson(value);
        case 'ServerTarget':
          return ServerTarget.fromJson(value);
        case 'ServerTargetExecutionOptions':
          return ServerTargetExecutionOptions.fromJson(value);
        case 'ServerTaskRequestMessage':
          return ServerTaskRequestMessage.fromJson(value);
        case 'ServiceBusSubscriptionChannel':
          return ServiceBusSubscriptionChannel.fromJson(value);
        case 'ServiceEndpoint':
          return ServiceEndpoint.fromJson(value);
        case 'ServiceEndpointAuthenticationScheme':
          return ServiceEndpointAuthenticationScheme.fromJson(value);
        case 'ServiceEndpointDetails':
          return ServiceEndpointDetails.fromJson(value);
        case 'ServiceEndpointExecutionData':
          return ServiceEndpointExecutionData.fromJson(value);
        case 'ServiceEndpointExecutionOwner':
          return ServiceEndpointExecutionOwner.fromJson(value);
        case 'ServiceEndpointExecutionRecord':
          return ServiceEndpointExecutionRecord.fromJson(value);
        case 'ServiceEndpointExecutionRecordsInput':
          return ServiceEndpointExecutionRecordsInput.fromJson(value);
        case 'ServiceEndpointOAuthConfigurationReference':
          return ServiceEndpointOAuthConfigurationReference.fromJson(value);
        case 'ServiceEndpointReference':
          return ServiceEndpointReference.fromJson(value);
        case 'ServiceEndpointRequest':
          return ServiceEndpointRequest.fromJson(value);
        case 'ServiceEndpointRequestResult':
          return ServiceEndpointRequestResult.fromJson(value);
        case 'ServiceEndpointType':
          return ServiceEndpointType.fromJson(value);
        case 'ServiceHooksSubscriptionChannel':
          return ServiceHooksSubscriptionChannel.fromJson(value);
        case 'SessionRequest':
          return SessionRequest.fromJson(value);
        case 'SessionResponse':
          return SessionResponse.fromJson(value);
        case 'SessionToken':
          return SessionToken.fromJson(value);
        case 'ShallowReference':
          return ShallowReference.fromJson(value);
        case 'ShallowTestCaseResult':
          return ShallowTestCaseResult.fromJson(value);
        case 'ShareNotificationContext':
          return ShareNotificationContext.fromJson(value);
        case 'SharedStepModel':
          return SharedStepModel.fromJson(value);
        case 'SoapSubscriptionChannel':
          return SoapSubscriptionChannel.fromJson(value);
        case 'SortOption':
          return SortOption.fromJson(value);
        case 'SourceIdInput':
          return SourceIdInput.fromJson(value);
        case 'SourceProviderAttributes':
          return SourceProviderAttributes.fromJson(value);
        case 'SourcePullRequestVersion':
          return SourcePullRequestVersion.fromJson(value);
        case 'SourceRelatedWorkItem':
          return SourceRelatedWorkItem.fromJson(value);
        case 'SourceRepoTrigger':
          return SourceRepoTrigger.fromJson(value);
        case 'SourceRepositories':
          return SourceRepositories.fromJson(value);
        case 'SourceRepository':
          return SourceRepository.fromJson(value);
        case 'SourceRepositoryItem':
          return SourceRepositoryItem.fromJson(value);
        case 'SourceTestPlanInfo':
          return SourceTestPlanInfo.fromJson(value);
        case 'SourceTestSuiteInfo':
          return SourceTestSuiteInfo.fromJson(value);
        case 'SourceTestplanResponse':
          return SourceTestplanResponse.fromJson(value);
        case 'SourceToTargetRef':
          return SourceToTargetRef.fromJson(value);
        case 'StageReference':
          return StageReference.fromJson(value);
        case 'StaticAgentRunSetting':
          return StaticAgentRunSetting.fromJson(value);
        case 'StatusAddedEvent':
          return StatusAddedEvent.fromJson(value);
        case 'StatusUpdatedEvent':
          return StatusUpdatedEvent.fromJson(value);
        case 'StatusesDeletedEvent':
          return StatusesDeletedEvent.fromJson(value);
        case 'StreamedBatch':
          return StreamedBatch.fromJson(value);
        case 'SubType':
          return SubType.fromJson(value);
        case 'Subscription':
          return Subscription.fromJson(value);
        case 'SubscriptionAdminSettings':
          return SubscriptionAdminSettings.fromJson(value);
        case 'SubscriptionChannelWithAddress':
          return SubscriptionChannelWithAddress.fromJson(value);
        case 'SubscriptionDiagnostics':
          return SubscriptionDiagnostics.fromJson(value);
        case 'SubscriptionEvaluation':
          return SubscriptionEvaluation.fromJson(value);
        case 'SubscriptionEvaluationClause':
          return SubscriptionEvaluationClause.fromJson(value);
        case 'SubscriptionEvaluationRequest':
          return SubscriptionEvaluationRequest.fromJson(value);
        case 'SubscriptionEvaluationResult':
          return SubscriptionEvaluationResult.fromJson(value);
        case 'SubscriptionEvaluationSettings':
          return SubscriptionEvaluationSettings.fromJson(value);
        case 'SubscriptionInputValuesQuery':
          return SubscriptionInputValuesQuery.fromJson(value);
        case 'SubscriptionManagement':
          return SubscriptionManagement.fromJson(value);
        case 'SubscriptionQuery':
          return SubscriptionQuery.fromJson(value);
        case 'SubscriptionQueryCondition':
          return SubscriptionQueryCondition.fromJson(value);
        case 'SubscriptionScope':
          return SubscriptionScope.fromJson(value);
        case 'SubscriptionTraceDiagnosticLog':
          return SubscriptionTraceDiagnosticLog.fromJson(value);
        case 'SubscriptionTraceEventProcessingLog':
          return SubscriptionTraceEventProcessingLog.fromJson(value);
        case 'SubscriptionTraceNotificationDeliveryLog':
          return SubscriptionTraceNotificationDeliveryLog.fromJson(value);
        case 'SubscriptionTracing':
          return SubscriptionTracing.fromJson(value);
        case 'SubscriptionUserSettings':
          return SubscriptionUserSettings.fromJson(value);
        case 'SubscriptionsQuery':
          return SubscriptionsQuery.fromJson(value);
        case 'SuiteCreateModel':
          return SuiteCreateModel.fromJson(value);
        case 'SuiteEntry':
          return SuiteEntry.fromJson(value);
        case 'SuiteEntryUpdateModel':
          return SuiteEntryUpdateModel.fromJson(value);
        case 'SuiteEntryUpdateParams':
          return SuiteEntryUpdateParams.fromJson(value);
        case 'SuiteTestCase':
          return SuiteTestCase.fromJson(value);
        case 'SuiteTestCaseCreateUpdateParameters':
          return SuiteTestCaseCreateUpdateParameters.fromJson(value);
        case 'SuiteTestCaseUpdateModel':
          return SuiteTestCaseUpdateModel.fromJson(value);
        case 'SuiteUpdateModel':
          return SuiteUpdateModel.fromJson(value);
        case 'SummaryData':
          return SummaryData.fromJson(value);
        case 'SummaryMailSection':
          return SummaryMailSection.fromJson(value);
        case 'SummaryPercentileData':
          return SummaryPercentileData.fromJson(value);
        case 'SupportedExtension':
          return SupportedExtension.fromJson(value);
        case 'SupportedIde':
          return SupportedIde.fromJson(value);
        case 'SupportedTrigger':
          return SupportedTrigger.fromJson(value);
        case 'SvnMappingDetails':
          return SvnMappingDetails.fromJson(value);
        case 'SvnWorkspace':
          return SvnWorkspace.fromJson(value);
        case 'TCMPropertyBag2':
          return TCMPropertyBag2.fromJson(value);
        case 'TagFilter':
          return TagFilter.fromJson(value);
        case 'TaskAgent':
          return TaskAgent.fromJson(value);
        case 'TaskAgentAuthorization':
          return TaskAgentAuthorization.fromJson(value);
        case 'TaskAgentCloud':
          return TaskAgentCloud.fromJson(value);
        case 'TaskAgentCloudRequest':
          return TaskAgentCloudRequest.fromJson(value);
        case 'TaskAgentCloudType':
          return TaskAgentCloudType.fromJson(value);
        case 'TaskAgentDelaySource':
          return TaskAgentDelaySource.fromJson(value);
        case 'TaskAgentJob':
          return TaskAgentJob.fromJson(value);
        case 'TaskAgentJobRequest':
          return TaskAgentJobRequest.fromJson(value);
        case 'TaskAgentJobStep':
          return TaskAgentJobStep.fromJson(value);
        case 'TaskAgentJobTask':
          return TaskAgentJobTask.fromJson(value);
        case 'TaskAgentJobVariable':
          return TaskAgentJobVariable.fromJson(value);
        case 'TaskAgentManualUpdate':
          return TaskAgentManualUpdate.fromJson(value);
        case 'TaskAgentMessage':
          return TaskAgentMessage.fromJson(value);
        case 'TaskAgentMinAgentVersionRequiredUpdate':
          return TaskAgentMinAgentVersionRequiredUpdate.fromJson(value);
        case 'TaskAgentPool':
          return TaskAgentPool.fromJson(value);
        case 'TaskAgentPoolMaintenanceDefinition':
          return TaskAgentPoolMaintenanceDefinition.fromJson(value);
        case 'TaskAgentPoolMaintenanceJob':
          return TaskAgentPoolMaintenanceJob.fromJson(value);
        case 'TaskAgentPoolMaintenanceJobTargetAgent':
          return TaskAgentPoolMaintenanceJobTargetAgent.fromJson(value);
        case 'TaskAgentPoolMaintenanceOptions':
          return TaskAgentPoolMaintenanceOptions.fromJson(value);
        case 'TaskAgentPoolMaintenanceRetentionPolicy':
          return TaskAgentPoolMaintenanceRetentionPolicy.fromJson(value);
        case 'TaskAgentPoolMaintenanceSchedule':
          return TaskAgentPoolMaintenanceSchedule.fromJson(value);
        case 'TaskAgentPoolReference':
          return TaskAgentPoolReference.fromJson(value);
        case 'TaskAgentPoolStatus':
          return TaskAgentPoolStatus.fromJson(value);
        case 'TaskAgentPoolSummary':
          return TaskAgentPoolSummary.fromJson(value);
        case 'TaskAgentPublicKey':
          return TaskAgentPublicKey.fromJson(value);
        case 'TaskAgentQueue':
          return TaskAgentQueue.fromJson(value);
        case 'TaskAgentReference':
          return TaskAgentReference.fromJson(value);
        case 'TaskAgentSession':
          return TaskAgentSession.fromJson(value);
        case 'TaskAgentSessionKey':
          return TaskAgentSessionKey.fromJson(value);
        case 'TaskAgentUpdate':
          return TaskAgentUpdate.fromJson(value);
        case 'TaskAgentUpdateReason':
          return TaskAgentUpdateReason.fromJson(value);
        case 'TaskAssignedEvent':
          return TaskAssignedEvent.fromJson(value);
        case 'TaskAttachment':
          return TaskAttachment.fromJson(value);
        case 'TaskCompletedEvent':
          return TaskCompletedEvent.fromJson(value);
        case 'TaskDefinition':
          return TaskDefinition.fromJson(value);
        case 'TaskDefinitionEndpoint':
          return TaskDefinitionEndpoint.fromJson(value);
        case 'TaskDefinitionReference':
          return TaskDefinitionReference.fromJson(value);
        case 'TaskEvent':
          return TaskEvent.fromJson(value);
        case 'TaskExecution':
          return TaskExecution.fromJson(value);
        case 'TaskGroup':
          return TaskGroup.fromJson(value);
        case 'TaskGroupCreateParameter':
          return TaskGroupCreateParameter.fromJson(value);
        case 'TaskGroupDefinition':
          return TaskGroupDefinition.fromJson(value);
        case 'TaskGroupRevision':
          return TaskGroupRevision.fromJson(value);
        case 'TaskGroupStep':
          return TaskGroupStep.fromJson(value);
        case 'TaskGroupUpdateParameter':
          return TaskGroupUpdateParameter.fromJson(value);
        case 'TaskHubLicenseDetails':
          return TaskHubLicenseDetails.fromJson(value);
        case 'TaskInputDefinition':
          return TaskInputDefinition.fromJson(value);
        case 'TaskInputDefinitionBase':
          return TaskInputDefinitionBase.fromJson(value);
        case 'TaskInputValidation':
          return TaskInputValidation.fromJson(value);
        case 'TaskInstance':
          return TaskInstance.fromJson(value);
        case 'TaskLog':
          return TaskLog.fromJson(value);
        case 'TaskLogReference':
          return TaskLogReference.fromJson(value);
        case 'TaskOrchestrationContainer':
          return TaskOrchestrationContainer.fromJson(value);
        case 'TaskOrchestrationItem':
          return TaskOrchestrationItem.fromJson(value);
        case 'TaskOrchestrationJob':
          return TaskOrchestrationJob.fromJson(value);
        case 'TaskOrchestrationOwner':
          return TaskOrchestrationOwner.fromJson(value);
        case 'TaskOrchestrationPlan':
          return TaskOrchestrationPlan.fromJson(value);
        case 'TaskOrchestrationPlanGroup':
          return TaskOrchestrationPlanGroup.fromJson(value);
        case 'TaskOrchestrationPlanGroupReference':
          return TaskOrchestrationPlanGroupReference.fromJson(value);
        case 'TaskOrchestrationPlanGroupsQueueMetrics':
          return TaskOrchestrationPlanGroupsQueueMetrics.fromJson(value);
        case 'TaskOrchestrationPlanGroupsStartedEvent':
          return TaskOrchestrationPlanGroupsStartedEvent.fromJson(value);
        case 'TaskOrchestrationPlanReference':
          return TaskOrchestrationPlanReference.fromJson(value);
        case 'TaskOrchestrationQueuedPlan':
          return TaskOrchestrationQueuedPlan.fromJson(value);
        case 'TaskOrchestrationQueuedPlanGroup':
          return TaskOrchestrationQueuedPlanGroup.fromJson(value);
        case 'TaskOutputVariable':
          return TaskOutputVariable.fromJson(value);
        case 'TaskPackageMetadata':
          return TaskPackageMetadata.fromJson(value);
        case 'TaskReference':
          return TaskReference.fromJson(value);
        case 'TaskSourceDefinition':
          return TaskSourceDefinition.fromJson(value);
        case 'TaskSourceDefinitionBase':
          return TaskSourceDefinitionBase.fromJson(value);
        case 'TaskStartedEvent':
          return TaskStartedEvent.fromJson(value);
        case 'TaskVersion':
          return TaskVersion.fromJson(value);
        case 'TeamBacklogMapping':
          return TeamBacklogMapping.fromJson(value);
        case 'TeamContext':
          return TeamContext.fromJson(value);
        case 'TeamFieldValue':
          return TeamFieldValue.fromJson(value);
        case 'TeamFieldValues':
          return TeamFieldValues.fromJson(value);
        case 'TeamFieldValuesPatch':
          return TeamFieldValuesPatch.fromJson(value);
        case 'TeamIterationAttributes':
          return TeamIterationAttributes.fromJson(value);
        case 'TeamMember':
          return TeamMember.fromJson(value);
        case 'TeamMemberCapacity':
          return TeamMemberCapacity.fromJson(value);
        case 'TeamMemberCapacityIdentityRef':
          return TeamMemberCapacityIdentityRef.fromJson(value);
        case 'TeamProject':
          return TeamProject.fromJson(value);
        case 'TeamProjectCollection':
          return TeamProjectCollection.fromJson(value);
        case 'TeamProjectCollectionReference':
          return TeamProjectCollectionReference.fromJson(value);
        case 'TeamProjectReference':
          return TeamProjectReference.fromJson(value);
        case 'TeamRef':
          return TeamRef.fromJson(value);
        case 'TeamSetting':
          return TeamSetting.fromJson(value);
        case 'TeamSettingsDataContractBase':
          return TeamSettingsDataContractBase.fromJson(value);
        case 'TeamSettingsDaysOff':
          return TeamSettingsDaysOff.fromJson(value);
        case 'TeamSettingsDaysOffPatch':
          return TeamSettingsDaysOffPatch.fromJson(value);
        case 'TeamSettingsIteration':
          return TeamSettingsIteration.fromJson(value);
        case 'TeamSettingsPatch':
          return TeamSettingsPatch.fromJson(value);
        case 'TemporaryDataCreatedDTO':
          return TemporaryDataCreatedDTO.fromJson(value);
        case 'TemporaryDataDTO':
          return TemporaryDataDTO.fromJson(value);
        case 'TenantDetails':
          return TenantDetails.fromJson(value);
        case 'TestActionResult':
          return TestActionResult.fromJson(value);
        case 'TestActionResult2':
          return TestActionResult2.fromJson(value);
        case 'TestActionResultModel':
          return TestActionResultModel.fromJson(value);
        case 'TestAttachment':
          return TestAttachment.fromJson(value);
        case 'TestAttachmentReference':
          return TestAttachmentReference.fromJson(value);
        case 'TestAttachmentRequestModel':
          return TestAttachmentRequestModel.fromJson(value);
        case 'TestAuthoringDetails':
          return TestAuthoringDetails.fromJson(value);
        case 'TestCase':
          return TestCase.fromJson(value);
        case 'TestCaseMetadata2':
          return TestCaseMetadata2.fromJson(value);
        case 'TestCaseReference':
          return TestCaseReference.fromJson(value);
        case 'TestCaseReference2':
          return TestCaseReference2.fromJson(value);
        case 'TestCaseResult':
          return TestCaseResult.fromJson(value);
        case 'TestCaseResultAttachmentModel':
          return TestCaseResultAttachmentModel.fromJson(value);
        case 'TestCaseResultIdAndRev':
          return TestCaseResultIdAndRev.fromJson(value);
        case 'TestCaseResultIdentifier':
          return TestCaseResultIdentifier.fromJson(value);
        case 'TestCaseResultUpdateModel':
          return TestCaseResultUpdateModel.fromJson(value);
        case 'TestConfiguration':
          return TestConfiguration.fromJson(value);
        case 'TestConfigurationCreateUpdateParameters':
          return TestConfigurationCreateUpdateParameters.fromJson(value);
        case 'TestConfigurationReference':
          return TestConfigurationReference.fromJson(value);
        case 'TestDefinition':
          return TestDefinition.fromJson(value);
        case 'TestDefinitionBasic':
          return TestDefinitionBasic.fromJson(value);
        case 'TestDrop':
          return TestDrop.fromJson(value);
        case 'TestDropRef':
          return TestDropRef.fromJson(value);
        case 'TestEnvironment':
          return TestEnvironment.fromJson(value);
        case 'TestExecutionReportData':
          return TestExecutionReportData.fromJson(value);
        case 'TestExtensionField':
          return TestExtensionField.fromJson(value);
        case 'TestExtensionFieldDetails':
          return TestExtensionFieldDetails.fromJson(value);
        case 'TestFailureDetails':
          return TestFailureDetails.fromJson(value);
        case 'TestFailureType':
          return TestFailureType.fromJson(value);
        case 'TestFailuresAnalysis':
          return TestFailuresAnalysis.fromJson(value);
        case 'TestFieldData':
          return TestFieldData.fromJson(value);
        case 'TestFieldsEx2':
          return TestFieldsEx2.fromJson(value);
        case 'TestFlakyIdentifier':
          return TestFlakyIdentifier.fromJson(value);
        case 'TestHistoryQuery':
          return TestHistoryQuery.fromJson(value);
        case 'TestIterationDetailsModel':
          return TestIterationDetailsModel.fromJson(value);
        case 'TestLog':
          return TestLog.fromJson(value);
        case 'TestLogReference':
          return TestLogReference.fromJson(value);
        case 'TestLogStatus':
          return TestLogStatus.fromJson(value);
        case 'TestLogStoreEndpointDetails':
          return TestLogStoreEndpointDetails.fromJson(value);
        case 'TestMessageLog2':
          return TestMessageLog2.fromJson(value);
        case 'TestMessageLogDetails':
          return TestMessageLogDetails.fromJson(value);
        case 'TestMessageLogEntry':
          return TestMessageLogEntry.fromJson(value);
        case 'TestMessageLogEntry2':
          return TestMessageLogEntry2.fromJson(value);
        case 'TestMethod':
          return TestMethod.fromJson(value);
        case 'TestOperationReference':
          return TestOperationReference.fromJson(value);
        case 'TestOutcomeSettings':
          return TestOutcomeSettings.fromJson(value);
        case 'TestParameter2':
          return TestParameter2.fromJson(value);
        case 'TestPlan':
          return TestPlan.fromJson(value);
        case 'TestPlanCloneRequest':
          return TestPlanCloneRequest.fromJson(value);
        case 'TestPlanCreateParams':
          return TestPlanCreateParams.fromJson(value);
        case 'TestPlanDetailedReference':
          return TestPlanDetailedReference.fromJson(value);
        case 'TestPlanHubData':
          return TestPlanHubData.fromJson(value);
        case 'TestPlanReference':
          return TestPlanReference.fromJson(value);
        case 'TestPlanUpdateParams':
          return TestPlanUpdateParams.fromJson(value);
        case 'TestPlansHubRefreshData':
          return TestPlansHubRefreshData.fromJson(value);
        case 'TestPlansWithSelection':
          return TestPlansWithSelection.fromJson(value);
        case 'TestPoint':
          return TestPoint.fromJson(value);
        case 'TestPointCount':
          return TestPointCount.fromJson(value);
        case 'TestPointReference':
          return TestPointReference.fromJson(value);
        case 'TestPointResults':
          return TestPointResults.fromJson(value);
        case 'TestPointUpdateParams':
          return TestPointUpdateParams.fromJson(value);
        case 'TestPointsEvent':
          return TestPointsEvent.fromJson(value);
        case 'TestPointsQuery':
          return TestPointsQuery.fromJson(value);
        case 'TestPointsUpdatedEvent':
          return TestPointsUpdatedEvent.fromJson(value);
        case 'TestResolutionState':
          return TestResolutionState.fromJson(value);
        case 'TestResult2':
          return TestResult2.fromJson(value);
        case 'TestResultAcrossProjectResponse':
          return TestResultAcrossProjectResponse.fromJson(value);
        case 'TestResultAttachment':
          return TestResultAttachment.fromJson(value);
        case 'TestResultAttachmentIdentity':
          return TestResultAttachmentIdentity.fromJson(value);
        case 'TestResultCreateModel':
          return TestResultCreateModel.fromJson(value);
        case 'TestResultDocument':
          return TestResultDocument.fromJson(value);
        case 'TestResultHistory':
          return TestResultHistory.fromJson(value);
        case 'TestResultHistoryDetailsForGroup':
          return TestResultHistoryDetailsForGroup.fromJson(value);
        case 'TestResultHistoryForGroup':
          return TestResultHistoryForGroup.fromJson(value);
        case 'TestResultMetaData':
          return TestResultMetaData.fromJson(value);
        case 'TestResultMetaDataUpdateInput':
          return TestResultMetaDataUpdateInput.fromJson(value);
        case 'TestResultMetaDataUpdateResponse':
          return TestResultMetaDataUpdateResponse.fromJson(value);
        case 'TestResultModelBase':
          return TestResultModelBase.fromJson(value);
        case 'TestResultParameter':
          return TestResultParameter.fromJson(value);
        case 'TestResultParameterModel':
          return TestResultParameterModel.fromJson(value);
        case 'TestResultPayload':
          return TestResultPayload.fromJson(value);
        case 'TestResultReset2':
          return TestResultReset2.fromJson(value);
        case 'TestResultSummary':
          return TestResultSummary.fromJson(value);
        case 'TestResultTrendFilter':
          return TestResultTrendFilter.fromJson(value);
        case 'TestResults':
          return TestResults.fromJson(value);
        case 'TestResultsContext':
          return TestResultsContext.fromJson(value);
        case 'TestResultsDetails':
          return TestResultsDetails.fromJson(value);
        case 'TestResultsDetailsForGroup':
          return TestResultsDetailsForGroup.fromJson(value);
        case 'TestResultsEx2':
          return TestResultsEx2.fromJson(value);
        case 'TestResultsGroupsForBuild':
          return TestResultsGroupsForBuild.fromJson(value);
        case 'TestResultsGroupsForRelease':
          return TestResultsGroupsForRelease.fromJson(value);
        case 'TestResultsQuery':
          return TestResultsQuery.fromJson(value);
        case 'TestResultsSettings':
          return TestResultsSettings.fromJson(value);
        case 'TestResultsSummary':
          return TestResultsSummary.fromJson(value);
        case 'TestResultsUpdateSettings':
          return TestResultsUpdateSettings.fromJson(value);
        case 'TestResultsWithWatermark':
          return TestResultsWithWatermark.fromJson(value);
        case 'TestRun':
          return TestRun.fromJson(value);
        case 'TestRun2':
          return TestRun2.fromJson(value);
        case 'TestRunAbortMessage':
          return TestRunAbortMessage.fromJson(value);
        case 'TestRunBasic':
          return TestRunBasic.fromJson(value);
        case 'TestRunCanceledEvent':
          return TestRunCanceledEvent.fromJson(value);
        case 'TestRunContext2':
          return TestRunContext2.fromJson(value);
        case 'TestRunCounterInstance':
          return TestRunCounterInstance.fromJson(value);
        case 'TestRunCoverage':
          return TestRunCoverage.fromJson(value);
        case 'TestRunCreatedEvent':
          return TestRunCreatedEvent.fromJson(value);
        case 'TestRunEvent':
          return TestRunEvent.fromJson(value);
        case 'TestRunEx2':
          return TestRunEx2.fromJson(value);
        case 'TestRunExtended2':
          return TestRunExtended2.fromJson(value);
        case 'TestRunMessage':
          return TestRunMessage.fromJson(value);
        case 'TestRunStartedEvent':
          return TestRunStartedEvent.fromJson(value);
        case 'TestRunStatistic':
          return TestRunStatistic.fromJson(value);
        case 'TestRunSummary2':
          return TestRunSummary2.fromJson(value);
        case 'TestRunWithDtlEnvEvent':
          return TestRunWithDtlEnvEvent.fromJson(value);
        case 'TestSession':
          return TestSession.fromJson(value);
        case 'TestSessionExploredWorkItemReference':
          return TestSessionExploredWorkItemReference.fromJson(value);
        case 'TestSessionWorkItemReference':
          return TestSessionWorkItemReference.fromJson(value);
        case 'TestSettings':
          return TestSettings.fromJson(value);
        case 'TestSettings2':
          return TestSettings2.fromJson(value);
        case 'TestSettingsMachineRole':
          return TestSettingsMachineRole.fromJson(value);
        case 'TestSubResult':
          return TestSubResult.fromJson(value);
        case 'TestSuite':
          return TestSuite.fromJson(value);
        case 'TestSuiteCloneRequest':
          return TestSuiteCloneRequest.fromJson(value);
        case 'TestSuiteCreateParams':
          return TestSuiteCreateParams.fromJson(value);
        case 'TestSuiteCreateUpdateCommonParams':
          return TestSuiteCreateUpdateCommonParams.fromJson(value);
        case 'TestSuiteReference':
          return TestSuiteReference.fromJson(value);
        case 'TestSuiteReferenceWithProject':
          return TestSuiteReferenceWithProject.fromJson(value);
        case 'TestSuiteUpdateParams':
          return TestSuiteUpdateParams.fromJson(value);
        case 'TestSummary':
          return TestSummary.fromJson(value);
        case 'TestSummaryForWorkItem':
          return TestSummaryForWorkItem.fromJson(value);
        case 'TestTag':
          return TestTag.fromJson(value);
        case 'TestTagSummary':
          return TestTagSummary.fromJson(value);
        case 'TestTagsUpdateModel':
          return TestTagsUpdateModel.fromJson(value);
        case 'TestToWorkItemLinks':
          return TestToWorkItemLinks.fromJson(value);
        case 'TestVariable':
          return TestVariable.fromJson(value);
        case 'TestVariableCreateUpdateParameters':
          return TestVariableCreateUpdateParameters.fromJson(value);
        case 'TfvcArtifactDownloadInput':
          return TfvcArtifactDownloadInput.fromJson(value);
        case 'TfvcBranch':
          return TfvcBranch.fromJson(value);
        case 'TfvcBranchMapping':
          return TfvcBranchMapping.fromJson(value);
        case 'TfvcBranchRef':
          return TfvcBranchRef.fromJson(value);
        case 'TfvcChange':
          return TfvcChange.fromJson(value);
        case 'TfvcChangeset':
          return TfvcChangeset.fromJson(value);
        case 'TfvcChangesetRef':
          return TfvcChangesetRef.fromJson(value);
        case 'TfvcChangesetSearchCriteria':
          return TfvcChangesetSearchCriteria.fromJson(value);
        case 'TfvcChangesetsRequestData':
          return TfvcChangesetsRequestData.fromJson(value);
        case 'TfvcCheckinEventData':
          return TfvcCheckinEventData.fromJson(value);
        case 'TfvcHistoryEntry':
          return TfvcHistoryEntry.fromJson(value);
        case 'TfvcItem':
          return TfvcItem.fromJson(value);
        case 'TfvcItemDescriptor':
          return TfvcItemDescriptor.fromJson(value);
        case 'TfvcItemPreviousHash':
          return TfvcItemPreviousHash.fromJson(value);
        case 'TfvcItemRequestData':
          return TfvcItemRequestData.fromJson(value);
        case 'TfvcLabel':
          return TfvcLabel.fromJson(value);
        case 'TfvcLabelRef':
          return TfvcLabelRef.fromJson(value);
        case 'TfvcLabelRequestData':
          return TfvcLabelRequestData.fromJson(value);
        case 'TfvcMappingFilter':
          return TfvcMappingFilter.fromJson(value);
        case 'TfvcMergeSource':
          return TfvcMergeSource.fromJson(value);
        case 'TfvcPolicyFailureInfo':
          return TfvcPolicyFailureInfo.fromJson(value);
        case 'TfvcPolicyOverrideInfo':
          return TfvcPolicyOverrideInfo.fromJson(value);
        case 'TfvcShallowBranchRef':
          return TfvcShallowBranchRef.fromJson(value);
        case 'TfvcShelveset':
          return TfvcShelveset.fromJson(value);
        case 'TfvcShelvesetRef':
          return TfvcShelvesetRef.fromJson(value);
        case 'TfvcShelvesetRequestData':
          return TfvcShelvesetRequestData.fromJson(value);
        case 'TfvcStatistics':
          return TfvcStatistics.fromJson(value);
        case 'TfvcVersionDescriptor':
          return TfvcVersionDescriptor.fromJson(value);
        case 'TimeZone':
          return TimeZone.fromJson(value);
        case 'TimeZoneList':
          return TimeZoneList.fromJson(value);
        case 'Timeline':
          return Timeline.fromJson(value);
        case 'TimelineAttempt':
          return TimelineAttempt.fromJson(value);
        case 'TimelineCriteriaStatus':
          return TimelineCriteriaStatus.fromJson(value);
        case 'TimelineIterationStatus':
          return TimelineIterationStatus.fromJson(value);
        case 'TimelineRecord':
          return TimelineRecord.fromJson(value);
        case 'TimelineRecordFeedLinesWrapper':
          return TimelineRecordFeedLinesWrapper.fromJson(value);
        case 'TimelineRecordsUpdatedEvent':
          return TimelineRecordsUpdatedEvent.fromJson(value);
        case 'TimelineReference':
          return TimelineReference.fromJson(value);
        case 'TimelineTeamData':
          return TimelineTeamData.fromJson(value);
        case 'TimelineTeamIteration':
          return TimelineTeamIteration.fromJson(value);
        case 'TimelineTeamStatus':
          return TimelineTeamStatus.fromJson(value);
        case 'TitleDescriptionUpdatedEvent':
          return TitleDescriptionUpdatedEvent.fromJson(value);
        case 'TokenAdminPagedSessionTokens':
          return TokenAdminPagedSessionTokens.fromJson(value);
        case 'TokenAdminRevocation':
          return TokenAdminRevocation.fromJson(value);
        case 'TokenAdminRevocationRule':
          return TokenAdminRevocationRule.fromJson(value);
        case 'TokenAdministrationRevocation':
          return TokenAdministrationRevocation.fromJson(value);
        case 'TransactionSummary':
          return TransactionSummary.fromJson(value);
        case 'Type':
          return Type.fromJson(value);
        case 'UPackPackageVersionDeletionState':
          return UPackPackageVersionDeletionState.fromJson(value);
        case 'UPackPackagesBatchRequest':
          return UPackPackagesBatchRequest.fromJson(value);
        case 'UPackRecycleBinPackageVersionDetails':
          return UPackRecycleBinPackageVersionDetails.fromJson(value);
        case 'UnsupportedFilter':
          return UnsupportedFilter.fromJson(value);
        case 'UnsupportedSubscriptionChannel':
          return UnsupportedSubscriptionChannel.fromJson(value);
        case 'UpdatePlan':
          return UpdatePlan.fromJson(value);
        case 'UpdateProcessModel':
          return UpdateProcessModel.fromJson(value);
        case 'UpdateProcessRuleRequest':
          return UpdateProcessRuleRequest.fromJson(value);
        case 'UpdateProcessWorkItemTypeFieldRequest':
          return UpdateProcessWorkItemTypeFieldRequest.fromJson(value);
        case 'UpdateProcessWorkItemTypeRequest':
          return UpdateProcessWorkItemTypeRequest.fromJson(value);
        case 'UpdateRefsRequest':
          return UpdateRefsRequest.fromJson(value);
        case 'UpdateSubscripitonDiagnosticsParameters':
          return UpdateSubscripitonDiagnosticsParameters.fromJson(value);
        case 'UpdateSubscripitonTracingParameters':
          return UpdateSubscripitonTracingParameters.fromJson(value);
        case 'UpdateTeam':
          return UpdateTeam.fromJson(value);
        case 'UpdateTestRunRequest':
          return UpdateTestRunRequest.fromJson(value);
        case 'UpdateTestRunResponse':
          return UpdateTestRunResponse.fromJson(value);
        case 'UpdatedProperties':
          return UpdatedProperties.fromJson(value);
        case 'UploadAttachmentsRequest':
          return UploadAttachmentsRequest.fromJson(value);
        case 'UpstreamSource':
          return UpstreamSource.fromJson(value);
        case 'UpstreamSourceInfo':
          return UpstreamSourceInfo.fromJson(value);
        case 'UserEntitlement':
          return UserEntitlement.fromJson(value);
        case 'UserEntitlementOperationReference':
          return UserEntitlementOperationReference.fromJson(value);
        case 'UserEntitlementOperationResult':
          return UserEntitlementOperationResult.fromJson(value);
        case 'UserEntitlementsPatchResponse':
          return UserEntitlementsPatchResponse.fromJson(value);
        case 'UserEntitlementsPostResponse':
          return UserEntitlementsPostResponse.fromJson(value);
        case 'UserEntitlementsResponseBase':
          return UserEntitlementsResponseBase.fromJson(value);
        case 'UserExtensionPolicy':
          return UserExtensionPolicy.fromJson(value);
        case 'UserSubscriptionChannel':
          return UserSubscriptionChannel.fromJson(value);
        case 'UserSystemSubscriptionChannel':
          return UserSystemSubscriptionChannel.fromJson(value);
        case 'UsersSummary':
          return UsersSummary.fromJson(value);
        case 'ValidationIssue':
          return ValidationIssue.fromJson(value);
        case 'ValidationItem':
          return ValidationItem.fromJson(value);
        case 'ValueDefinition':
          return ValueDefinition.fromJson(value);
        case 'VariableGroup':
          return VariableGroup.fromJson(value);
        case 'VariableGroupParameters':
          return VariableGroupParameters.fromJson(value);
        case 'VariableGroupReference':
          return VariableGroupReference.fromJson(value);
        case 'VariableMultipliersAgentExecutionOptions':
          return VariableMultipliersAgentExecutionOptions.fromJson(value);
        case 'VariableMultipliersServerExecutionOptions':
          return VariableMultipliersServerExecutionOptions.fromJson(value);
        case 'VariableValue':
          return VariableValue.fromJson(value);
        case 'Version':
          return Version.fromJson(value);
        case 'VersionControlProjectInfo':
          return VersionControlProjectInfo.fromJson(value);
        case 'VersionedPolicyConfigurationRef':
          return VersionedPolicyConfigurationRef.fromJson(value);
        case 'VersionedResource':
          return VersionedResource.fromJson(value);
        case 'VirtualMachine':
          return VirtualMachine.fromJson(value);
        case 'VirtualMachineGroup':
          return VirtualMachineGroup.fromJson(value);
        case 'VirtualMachineGroupCreateParameters':
          return VirtualMachineGroupCreateParameters.fromJson(value);
        case 'VssJsonCollectionWrapper':
          return VssJsonCollectionWrapper.fromJson(value);
        case 'VssJsonCollectionWrapperBase':
          return VssJsonCollectionWrapperBase.fromJson(value);
        case 'VssNotificationEvent':
          return VssNotificationEvent.fromJson(value);
        case 'WebApiConnectedService':
          return WebApiConnectedService.fromJson(value);
        case 'WebApiConnectedServiceDetails':
          return WebApiConnectedServiceDetails.fromJson(value);
        case 'WebApiConnectedServiceRef':
          return WebApiConnectedServiceRef.fromJson(value);
        case 'WebApiCreateTagRequestData':
          return WebApiCreateTagRequestData.fromJson(value);
        case 'WebApiLoadTestMachineInput':
          return WebApiLoadTestMachineInput.fromJson(value);
        case 'WebApiProject':
          return WebApiProject.fromJson(value);
        case 'WebApiProjectCollection':
          return WebApiProjectCollection.fromJson(value);
        case 'WebApiProjectCollectionRef':
          return WebApiProjectCollectionRef.fromJson(value);
        case 'WebApiSetupParamaters':
          return WebApiSetupParamaters.fromJson(value);
        case 'WebApiTagDefinition':
          return WebApiTagDefinition.fromJson(value);
        case 'WebApiTeam':
          return WebApiTeam.fromJson(value);
        case 'WebApiTeamRef':
          return WebApiTeamRef.fromJson(value);
        case 'WebApiTestMachine':
          return WebApiTestMachine.fromJson(value);
        case 'WebApiUserLoadTestMachineInput':
          return WebApiUserLoadTestMachineInput.fromJson(value);
        case 'WebInstanceSummaryData':
          return WebInstanceSummaryData.fromJson(value);
        case 'Widget':
          return Widget.fromJson(value);
        case 'WidgetMetadata':
          return WidgetMetadata.fromJson(value);
        case 'WidgetMetadataResponse':
          return WidgetMetadataResponse.fromJson(value);
        case 'WidgetPosition':
          return WidgetPosition.fromJson(value);
        case 'WidgetResponse':
          return WidgetResponse.fromJson(value);
        case 'WidgetSize':
          return WidgetSize.fromJson(value);
        case 'WidgetTypesResponse':
          return WidgetTypesResponse.fromJson(value);
        case 'WidgetsVersionedList':
          return WidgetsVersionedList.fromJson(value);
        case 'Wiki':
          return Wiki.fromJson(value);
        case 'WikiAttachment':
          return WikiAttachment.fromJson(value);
        case 'WikiAttachmentResponse':
          return WikiAttachmentResponse.fromJson(value);
        case 'WikiCreateBaseParameters':
          return WikiCreateBaseParameters.fromJson(value);
        case 'WikiCreateParameters':
          return WikiCreateParameters.fromJson(value);
        case 'WikiCreateParametersV2':
          return WikiCreateParametersV2.fromJson(value);
        case 'WikiHit':
          return WikiHit.fromJson(value);
        case 'WikiPage':
          return WikiPage.fromJson(value);
        case 'WikiPageCreateOrUpdateParameters':
          return WikiPageCreateOrUpdateParameters.fromJson(value);
        case 'WikiPageMove':
          return WikiPageMove.fromJson(value);
        case 'WikiPageMoveParameters':
          return WikiPageMoveParameters.fromJson(value);
        case 'WikiPageMoveResponse':
          return WikiPageMoveResponse.fromJson(value);
        case 'WikiPageResponse':
          return WikiPageResponse.fromJson(value);
        case 'WikiPageViewStats':
          return WikiPageViewStats.fromJson(value);
        case 'WikiResult':
          return WikiResult.fromJson(value);
        case 'WikiSearchRequest':
          return WikiSearchRequest.fromJson(value);
        case 'WikiSearchResponse':
          return WikiSearchResponse.fromJson(value);
        case 'WikiUpdateParameters':
          return WikiUpdateParameters.fromJson(value);
        case 'WikiUpdatedNotificationMessage':
          return WikiUpdatedNotificationMessage.fromJson(value);
        case 'WikiV2':
          return WikiV2.fromJson(value);
        case 'Wiql':
          return Wiql.fromJson(value);
        case 'WitContribution':
          return WitContribution.fromJson(value);
        case 'WorkArtifactLink':
          return WorkArtifactLink.fromJson(value);
        case 'WorkItem':
          return WorkItem.fromJson(value);
        case 'WorkItemBatchGetRequest':
          return WorkItemBatchGetRequest.fromJson(value);
        case 'WorkItemBehavior':
          return WorkItemBehavior.fromJson(value);
        case 'WorkItemBehaviorField':
          return WorkItemBehaviorField.fromJson(value);
        case 'WorkItemBehaviorReference':
          return WorkItemBehaviorReference.fromJson(value);
        case 'WorkItemClassificationNode':
          return WorkItemClassificationNode.fromJson(value);
        case 'WorkItemColor':
          return WorkItemColor.fromJson(value);
        case 'WorkItemComment':
          return WorkItemComment.fromJson(value);
        case 'WorkItemCommentVersionRef':
          return WorkItemCommentVersionRef.fromJson(value);
        case 'WorkItemComments':
          return WorkItemComments.fromJson(value);
        case 'WorkItemDelete':
          return WorkItemDelete.fromJson(value);
        case 'WorkItemDeleteReference':
          return WorkItemDeleteReference.fromJson(value);
        case 'WorkItemDeleteShallowReference':
          return WorkItemDeleteShallowReference.fromJson(value);
        case 'WorkItemDeleteUpdate':
          return WorkItemDeleteUpdate.fromJson(value);
        case 'WorkItemDetails':
          return WorkItemDetails.fromJson(value);
        case 'WorkItemField':
          return WorkItemField.fromJson(value);
        case 'WorkItemFieldOperation':
          return WorkItemFieldOperation.fromJson(value);
        case 'WorkItemFieldReference':
          return WorkItemFieldReference.fromJson(value);
        case 'WorkItemFieldUpdate':
          return WorkItemFieldUpdate.fromJson(value);
        case 'WorkItemHistory':
          return WorkItemHistory.fromJson(value);
        case 'WorkItemHit':
          return WorkItemHit.fromJson(value);
        case 'WorkItemIcon':
          return WorkItemIcon.fromJson(value);
        case 'WorkItemLink':
          return WorkItemLink.fromJson(value);
        case 'WorkItemNextStateOnTransition':
          return WorkItemNextStateOnTransition.fromJson(value);
        case 'WorkItemQueryClause':
          return WorkItemQueryClause.fromJson(value);
        case 'WorkItemQueryResult':
          return WorkItemQueryResult.fromJson(value);
        case 'WorkItemQuerySortColumn':
          return WorkItemQuerySortColumn.fromJson(value);
        case 'WorkItemReference':
          return WorkItemReference.fromJson(value);
        case 'WorkItemRelation':
          return WorkItemRelation.fromJson(value);
        case 'WorkItemRelationType':
          return WorkItemRelationType.fromJson(value);
        case 'WorkItemRelationUpdates':
          return WorkItemRelationUpdates.fromJson(value);
        case 'WorkItemResult':
          return WorkItemResult.fromJson(value);
        case 'WorkItemSearchRequest':
          return WorkItemSearchRequest.fromJson(value);
        case 'WorkItemSearchResponse':
          return WorkItemSearchResponse.fromJson(value);
        case 'WorkItemStateColor':
          return WorkItemStateColor.fromJson(value);
        case 'WorkItemStateInputModel':
          return WorkItemStateInputModel.fromJson(value);
        case 'WorkItemStateResultModel':
          return WorkItemStateResultModel.fromJson(value);
        case 'WorkItemStateTransition':
          return WorkItemStateTransition.fromJson(value);
        case 'WorkItemTemplate':
          return WorkItemTemplate.fromJson(value);
        case 'WorkItemTemplateReference':
          return WorkItemTemplateReference.fromJson(value);
        case 'WorkItemToTestLinks':
          return WorkItemToTestLinks.fromJson(value);
        case 'WorkItemTrackingReference':
          return WorkItemTrackingReference.fromJson(value);
        case 'WorkItemTrackingResource':
          return WorkItemTrackingResource.fromJson(value);
        case 'WorkItemTrackingResourceReference':
          return WorkItemTrackingResourceReference.fromJson(value);
        case 'WorkItemType':
          return WorkItemType.fromJson(value);
        case 'WorkItemTypeBehavior':
          return WorkItemTypeBehavior.fromJson(value);
        case 'WorkItemTypeCategory':
          return WorkItemTypeCategory.fromJson(value);
        case 'WorkItemTypeColor':
          return WorkItemTypeColor.fromJson(value);
        case 'WorkItemTypeColorAndIcon':
          return WorkItemTypeColorAndIcon.fromJson(value);
        case 'WorkItemTypeFieldInstance':
          return WorkItemTypeFieldInstance.fromJson(value);
        case 'WorkItemTypeFieldInstanceBase':
          return WorkItemTypeFieldInstanceBase.fromJson(value);
        case 'WorkItemTypeFieldWithReferences':
          return WorkItemTypeFieldWithReferences.fromJson(value);
        case 'WorkItemTypeModel':
          return WorkItemTypeModel.fromJson(value);
        case 'WorkItemTypeReference':
          return WorkItemTypeReference.fromJson(value);
        case 'WorkItemTypeStateColors':
          return WorkItemTypeStateColors.fromJson(value);
        case 'WorkItemTypeStateInfo':
          return WorkItemTypeStateInfo.fromJson(value);
        case 'WorkItemTypeTemplate':
          return WorkItemTypeTemplate.fromJson(value);
        case 'WorkItemTypeTemplateUpdateModel':
          return WorkItemTypeTemplateUpdateModel.fromJson(value);
        case 'WorkItemUpdate':
          return WorkItemUpdate.fromJson(value);
        case 'WorkflowTask':
          return WorkflowTask.fromJson(value);
        case 'WorkflowTaskReference':
          return WorkflowTaskReference.fromJson(value);
        case 'WorkspaceMapping':
          return WorkspaceMapping.fromJson(value);
        case 'WorkspaceTemplate':
          return WorkspaceTemplate.fromJson(value);
        case 'XamlBuildControllerReference':
          return XamlBuildControllerReference.fromJson(value);
        case 'XamlBuildDefinition':
          return XamlBuildDefinition.fromJson(value);
        case 'XamlBuildReference':
          return XamlBuildReference.fromJson(value);
        case 'XamlBuildServerReference':
          return XamlBuildServerReference.fromJson(value);
        case 'XamlDefinitionReference':
          return XamlDefinitionReference.fromJson(value);
        case 'YamlFileSource':
          return YamlFileSource.fromJson(value);
        case 'YamlPipelineProcess':
          return YamlPipelineProcess.fromJson(value);
        case 'YamlPipelineProcessResources':
          return YamlPipelineProcessResources.fromJson(value);
        case 'YamlProcess':
          return YamlProcess.fromJson(value);
        case 'YamlSourceReference':
          return YamlSourceReference.fromJson(value);
        default:
          {
            Match match;
            if (value is List &&
                (match = _regList.firstMatch(targetType)) != null) {
              var newTargetType = match[1];
              return value.map((v) => _deserialize(v, newTargetType)).toList();
            } else if (value is Map &&
                (match = _regMap.firstMatch(targetType)) != null) {
              var newTargetType = match[1];
              return Map.fromIterables(value.keys,
                  value.values.map((v) => _deserialize(v, newTargetType)));
            }
          }
      }
    } on Exception catch (e, stack) {
      throw ApiException.withInner(500, 'Exception during deserialization.', e, stack);
    }
    throw ApiException(500, 'Could not find a suitable class for deserialization');
  }

  dynamic deserialize(String json, String targetType) {
    // Remove all spaces.  Necessary for reg expressions as well.
    targetType = targetType.replaceAll(' ', '');

    if (targetType == 'String') return json;

    var decodedJson = jsonDecode(json);
    return _deserialize(decodedJson, targetType);
  }

  String serialize(Object obj) {
    String serialized = '';
    if (obj == null) {
      serialized = '';
    } else {
      serialized = json.encode(obj);
    }
    return serialized;
  }

  // We don't use a Map<String, String> for queryParams.
  // If collectionFormat is 'multi' a key might appear multiple times.
  Future<Response> invokeAPI(String path,
                             String method,
                             Iterable<QueryParam> queryParams,
                             Object body,
                             Map<String, String> headerParams,
                             Map<String, String> formParams,
                             String contentType,
                             List<String> authNames) async {

    _updateParamsForAuth(authNames, queryParams, headerParams);

    var ps = queryParams
      .where((p) => p.value != null)
      .map((p) => '${p.name}=${Uri.encodeQueryComponent(p.value)}');

    String queryString = ps.isNotEmpty ?
                         '?' + ps.join('&') :
                         '';

    String url = basePath + path + queryString;

    headerParams.addAll(_defaultHeaderMap);
    headerParams['Content-Type'] = contentType;

    if(body is MultipartRequest) {
      var request = MultipartRequest(method, Uri.parse(url));
      request.fields.addAll(body.fields);
      request.files.addAll(body.files);
      request.headers.addAll(body.headers);
      request.headers.addAll(headerParams);
      var response = await client.send(request);
      return Response.fromStream(response);
    } else {
      var msgBody = contentType == "application/x-www-form-urlencoded" ? formParams : serialize(body);
      switch(method) {
        case "POST":
          return client.post(url, headers: headerParams, body: msgBody);
        case "PUT":
          return client.put(url, headers: headerParams, body: msgBody);
        case "DELETE":
          return client.delete(url, headers: headerParams);
        case "PATCH":
          return client.patch(url, headers: headerParams, body: msgBody);
        default:
          return client.get(url, headers: headerParams);
      }
    }
  }

  /// Update query and header parameters based on authentication settings.
  /// @param authNames The authentications to apply
  void _updateParamsForAuth(List<String> authNames, List<QueryParam> queryParams, Map<String, String> headerParams) {
    authNames.forEach((authName) {
      Authentication auth = _authentications[authName];
      if (auth == null) throw ArgumentError("Authentication undefined: " + authName);
      auth.applyToParams(queryParams, headerParams);
    });
  }

  T getAuthentication<T extends Authentication>(String name) {
    var authentication = _authentications[name];

    return authentication is T ? authentication : null;
  }
}
